<apex:page showHeader="true" sidebar="false" extensions="csmrgp.CsMrgSelectCtrl" standardController="Case" recordSetVar="Cases" tabStyle="Case_Merge_Premium__tab" id="pg">
    <apex:includeScript value="/support/console/42.0/integration.js"/>
    <!-- SLDS Version 2.3.1 -->
    <apex:stylesheet value="{!URLFOR($Resource.csmrgp__CaseMergePremiumAssets,'case-merge-premium-assets/style/slds/assets/styles/salesforce-lightning-design-system-vf.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.csmrgp__CaseMergePremiumAssets,'case-merge-premium-assets/style/csmrgp-style.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.csmrgp__CaseMergePremiumAssets,'case-merge-premium-assets/script/remove-console-padding.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.csmrgp__CaseMergePremiumAssets,'case-merge-premium-assets/script/icon-util.js')}"/>
    
    <apex:stylesheet value="{!URLFOR($Resource.csmrgp__CaseMergePremiumAssets,'case-merge-premium-assets/pageAlert/pageAlert.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.csmrgp__CaseMergePremiumAssets,'case-merge-premium-assets/pageAlert/pageAlert.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.csmrgp__CaseMergePremiumAssets,'case-merge-premium-assets/pageAlert/pageAlertNotification.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.csmrgp__CaseMergePremiumAssets,'case-merge-premium-assets/pageAlert/pageAlertModal.js')}"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <script type="text/javascript">
        if(sforce.console.isInConsole()) {
            removeConsolePadding();
        }
    </script>

    <apex:variable var="maxCasesDisplayedDesktop" value="3"/>
    <apex:variable var="maxCasesDisplayedMobile" value="2"/>
    <apex:variable var="maxCasesDisplayedMobileSmaller" value="1"/>
    <apex:variable var="mobileScreenWidth" value="1250" />
    <apex:variable var="mobileScreenWidthSmaller" value="1024" />
    <apex:variable var="mobileScreenWidthSmallest" value="620" />

    <style type="text/css">
        .slds-scope {
            background-color: #FFF !important;
        }

        .slds-modal__header.slds-hidden {
            padding: 0;
        }

        .case-input .multiSelectPicklistTable select {
            width: 100% !important;
        }

        .case-input .multiSelectPicklistTable .multiSelectPicklistCell {
            width: 32px !important;
        }

        /*.multiSelectPicklistTable td {
            width: 33.333333%;
        }*/

        .el-invisible {
            visibility: hidden !important;
            opacity: 0 !important;
            user-select: none !important;
            pointer-events: none !important;
        }

        .outputText {
            color: black;
            text-decoration: none;
            cursor: default;
            pointer-events: none;
        }

        .obj-checkbox {
            width:50%;
            flex: 1 0 50%;
        }

        #merge-select {
            overflow: hidden;
            height: 100%;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
        }

        .no-width {
            width: 0 !important;
            visibility: hidden !important;
            opacity: 0 !important;
            padding: 0 !important;
            margin: 0 !important;
            min-width: 0 !important;
        }

        .slds-backdrop.white-backdrop {
            background-color: white;
        }

        .no-transition-override {
            transition: none !important;

            /** Compatibility Fallbacks **/
            -webkit-transition: none !important;
            -moz-transition: none !important;
            -o-transition: none !important;
        }

        .slds-select_container ~ .lookupInput {
            margin-left: .5rem;
        }

        .lookupInput a {
            margin-left: .4rem;
        }

        .lookupInput a:hover svg,
        .lookupInput a:focus svg,
        .edit-custom-btn:focus svg,
        .edit-custom-btn:hover svg {
            fill : #706e6b;
        }

        .reference-tab-link:hover svg,
        .reference-tab-link:focus svg {
            fill: rgb(0, 95, 178) !important;
        }

        .slds-button.edit-btn.edit-confirm-btn:hover,
        .slds-button.edit-btn.edit-confirm-btn:focus {
            background-color: #04844b !important;
        }

        .slds-button.edit-btn.edit-cancel-btn:hover,
        .slds-button.edit-btn.edit-cancel-btn:focus {
            background-color: #a12b2b !important;
        }

        #case-cards-container {
            transform: translateX(0);
            transition: transform 250ms ease-in-out;

            /** Compatibility Fallbacks **/
            -webkit-transition: transform 250ms ease-in-out;
            -moz-transition: transform 250ms ease-in-out;
            -o-transition: transform 250ms ease-in-out;
        }

        #case-cards-viewport {
            overflow: hidden;
            padding-bottom: 1.25rem;
            flex: 1;
        }

        /*** Case Card ***/
        .case-card {
            border: 2px solid #ccc;
            border-radius: 0.25rem;            

            min-width: calc((100% / {!JSENCODE(maxCasesDisplayedDesktop)}) - 1.5rem);
            width: calc((100% / {!JSENCODE(maxCasesDisplayedDesktop)}) - 1.5rem);
            max-width: 100%;
            transition: box-shadow 150ms ease-out, background-color 150ms ease-out;
            box-shadow: none;
            position: relative;

            /** Compatibility Fallbacks **/
            min-width: -moz-calc((100% / {!JSENCODE(maxCasesDisplayedDesktop)}) - 1.5rem);
            width: -moz-calc((100% / {!JSENCODE(maxCasesDisplayedDesktop)}) - 1.5rem);
            min-width: -webkit-calc((100% / {!JSENCODE(maxCasesDisplayedDesktop)}) - 1.5rem);
            width: -webkit-calc((100% / {!JSENCODE(maxCasesDisplayedDesktop)}) - 1.5rem);

            -webkit-transition: box-shadow 150ms ease-out, background-color 150ms ease-out;
            -moz-transition: box-shadow 150ms ease-out, background-color 150ms ease-out;
            -o-transition: box-shadow 150ms ease-out, background-color 150ms ease-out;
        }

        .case-card[data-master='true'] {
            box-shadow: #dddbda 0.2rem 0.2rem 0.75rem;
        }

        .case-card[data-removed='true'] {
            display: none;
        }

        .slds-gutters .case-card {
            margin-right: 0.75rem;
            margin-left: 0.75rem;
        }

        /** Case Card Header **/
        .case-card-header {
            background-color: #eee;
            border-radius: 0.25rem .25rem 0 0;
            position: relative;
        }

        /* Primary Case Button */
        .primary-case-btn-container {
            text-align: center;
        }

        .primary-case-btn-container .primary-case-btn {
            border-radius: 0.25rem;
            font-size: 1.5rem;
            transform: scale(0.5);
            background-color: rgb(236, 112, 57);
            color: white;
            width: 65%;
            padding: 1rem 2rem;
            transition: transform 300ms ease-out, width 300ms ease-out, border-radius 300ms ease-out;

            /** Compatibility Fallbacks **/
            -webkit-transition: transform 300ms ease-out, width 300ms ease-out, border-radius 300ms ease-out;
            -moz-transition: transform 300ms ease-out, width 300ms ease-out, border-radius 300ms ease-out;
            -o-transition: transform 300ms ease-out, width 300ms ease-out, border-radius 300ms ease-out;
        }
        
        .primary-case-btn-container .primary-case-btn.expanded {
            transform: scale(1);
            width: 100%;
            border-radius: 0;
        }

        .primary-banner {
            background-color: #ec7039;
            color: white;
            padding: 0.25rem 2rem;
            font-size: 1rem;
            transform: scale(1);
        }

        .child-banner {
            background-color: #FOFOFO;
            color: #ec7039;
            padding: 0.25rem 2rem;
            font-size: 1rem;
            transform: scale(1);
        }

        /* Remove Case Button */
        .remove-case-btn-container {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
        }

        .remove-case-btn-container .remove-case-btn {
            pointer-events: none;
            transform: scale(0);
            transition: transform 200ms ease-out;

            /** Compatibility Fallbacks **/
            -webkit-transition: transform 200ms ease-out;
            -moz-transition: transform 200ms ease-out;
            -o-transition: transform 200ms ease-out;
        }

        .remove-case-btn-container .remove-case-btn svg {
            fill: #000000;
        }

        .remove-case-btn-container .remove-case-btn.expanded {
            transform: scale(1);
            pointer-events: auto;
        }

        /** Case Card Details **/
        .case-card-details {
            padding-top: 1rem;
        }

        /* Detail Cols */
        .slds-gutters .detail-col {
            padding-left: 0.35rem;
            padding-right: 0.35rem;
        }

        .detail-col {
            padding-bottom: 0.75rem
        }


        /* Detail Cols - Field */
        .detail-col.label-col {
            width: 25%;
        }

        .field-label {
            text-align: right;
            /*word-wrap: break-word;*/
        }

        /* Detail Cols Value */
        .detail-col.value-col {
            width: 75%;
        }

        .detail-col.value-col .case-input div[data-field-type] {    /* Owner Fields */
            display: flex;
        }

        .detail-col.value-col .case-input div[data-field-type] select {
            width: inherit;
        }

        .detail-col.value-col .case-input div[data-field-type] .lookupInput{
            display: block !important;
            width: 100%;
        }

        .detail-col.value-col[data-is-value-wrapper='true'] .value-wrapper-content.overflow {
            overflow: hidden;
        }

        .detail-col.value-col[data-is-value-wrapper="true"][data-has-overflow="true"] {
            padding-bottom: 1.5rem;
        }

        .case-input input {
            background-color: #fff;
            color: #16325c;
            border: 1px solid #d8dde6;
            border-radius: .25rem;
            width: 100%;
            transition: border .1s linear,background-color .1s linear;
            display: inline-block;
            padding: 0 1rem 0 .75rem;
            line-height: 1.875rem;
            min-height: calc(1.875rem + (1px * 2));
            font: inherit;
            margin: 0;
        }

        .case-input select {
            -webkit-appearance: none;
            padding-left: .5rem;
            padding-right: 1.5rem;
            min-height: calc(1.875rem + (1px * 2));
            height: inherit;
            background-color: #fff;
            color: #16325c;
            border: 1px solid #d8dde6;
            border-radius: .25rem;
            width: 100%;
            transition: border .1s linear,background-color .1s linear;
            text-transform: none;
            font: inherit;
            margin: 0;
        }

        .case-input .slds-form-element.slds-has-error input:active, .case-input .slds-form-element.slds-has-error input:focus,
        .case-input .slds-form-element.slds-has-error select:active, .case-input .slds-form-element.slds-has-error select:focus {
            box-shadow: inset 0 0 0 1px #c23934, 0 0 3px #0070d2;
        }

        .case-input .slds-form-element.slds-has-error  input, .case-input .slds-form-element.slds-has-error select {
            background-color: #fff;
            border-color: #c23934;
            box-shadow: #c23934 0 0 0 1px inset;
            background-clip: padding-box;
        }

        .value-col {
            position: relative;
        }

        .field-value {
            word-break: break-word;
            text-align: justify;
            margin-right: -1rem;
            padding-right: 1rem;
        }

        .detail-col.value-col[data-is-value-wrapper='true'] .value-wrapper-content + a.toggle-link {
            display: none;
        }

        .detail-col.value-col[data-is-value-wrapper='true'] .value-wrapper-content.overflow + a.toggle-link {
            display: block;
        }

        .case-card[data-master='true'] .field-value {
            font-weight: bold;
        }

        .toggle-link {
            position: absolute;
            bottom: 0.5rem;
            color: black !important;
            font-size: .75rem;
        }

        .field-icons {
            max-height : 32px;
        }

        .case-input .lookupInput a {
            position: absolute;
            right: 0;
            padding: 0.375rem 0.3125rem;
            height: 100%;
        }

        .case-input .lookupInput input {
            padding-right: 1.75rem;
        }

        .field-icons > div {
            margin-left: 0.5rem;
        }

        .slds-button.edit-btn {
            border-radius: 50%;
            height:  1rem;
            width: 1rem;
        }

        .slds-button.edit-btn svg {
            width: .75rem !important;
            height: .75rem !important;
        }

        .slds-button.edit-btn.edit-confirm-btn {
            background-color: #059e5a !important;
        }

        .slds-button.edit-btn.edit-cancel-btn {
            background-color: #c23934 !important;
        }

        .reference-tab-link svg {
            fill: #006dcc !important;
        }

        /** Scroll Buttons **/
        .scroll-btn-container {
            margin: 0 1rem;
            display: -webkit-box; 
            display: -moz-box;
            display: -ms-flexbox;
            display: -webkit-flex;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .scroll-btn-container button.scroll-btn {
            width: 3rem;
            height: 100%;
            opacity: 1;
            visibility: visible;
            transition: opacity 250ms linear, visibility 250ms linear;
            margin-bottom: 1.25rem;
            border: 2px solid #ec7039;

            /** Compatibility Fallbacks **/
            -webkit-transition: opacity 250ms linear, visibility 250ms linear;
            -moz-transition: opacity 250ms linear, visibility 250ms linear;
            -o-transition: opacity 250ms linear, visibility 250ms linear;
        }

        .scroll-btn-container button.scroll-btn.hidden-btn {
            opacity: 0;
            visibility: hidden;
            pointer-events: none;
        }

        .scroll-btn-container button.scroll-btn img {
            width: 2rem;
            height: 2rem;
        }

        /* Modal */
        .textarea-from-case-card {
            border-radius: .25rem;
            border: 1px solid #dddbda; 
        }

        .textarea-from-case-card ~ .textarea-from-case-card {
            margin-top: 2rem;
        }

        .textarea-from-case-card-header {
            background-color: #eee;
            padding: 0.5rem;
            font-size: 1rem;
            font-weight: bold;
            border-bottom: 2px solid #dddbda; 
        }

        .textarea-from-case-card-content {
            padding: 1rem;
        }

        .text-area-copied {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: rgb(255, 255, 255);
            display: flex;
            justify-content: center;
            align-items: center;
            user-select: none;
            opacity: 1;
            visibility: visible;

            transition: opacity 500ms linear, visibility 500ms linear;
        }

        .text-area-copied.faded {
            opacity: 0;
            visibility: hidden;
        }

        .text-area-copied .slds-icon_container {
            margin-right: 0.5rem;
        }

        .text-area-copied svg {
            width: 1.5rem !important;
            height: 1.5rem !important;
            fill: #706e6b !important;
        }

        #text-area-tooltip-icon {
            height: 1.1rem !important;
            width: 1.1rem !important;
        }

        #text-area-tooltip-content {
            position: absolute;
            right: -.9rem;
            top: 2rem;
            width: 500px;
            display: none;
        }

        #text-area-tooltip-button:hover + #text-area-tooltip-content,
        #text-area-tooltip-button:focus + #text-area-tooltip-content {
            display: block;
        }

        .no-textareas-available-message {
            left: 0;
            position: absolute;
            right: 0;
            top: 0;
            text-align: center;
            bottom: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .textarea-modal-content {
            border-radius: 0.25rem;
        }


        /* Date Picker */
        .slds-date-bar {
            display: flex;
            display: -ms-flexbox;
            display: -webkit-flex; /* Safari */
            -webkit-align-items: center; /* Safari 7.0+ */
            align-items: center;
        }

        .datePicker {
            background-color: #ffffff;
            background-image: none;
        }

        .dateBar select:focus {
            outline: 0 !important;
            border-color: #1589ee !important;
            background-color: #fff !important;
        }

        .datePicker .calDays .weekend, .datePicker .calDays .weekday {
            background: none;
            border: 0 !important;
            padding: 2px 0 !important;
            width: 2rem !important;
            height: 2rem !important;
            border-radius: 50% !important;
            margin: auto !important;
            font-weight:normal !important;
        }

        .datePicker .calDays .todayDate {
            background: none !important;
            color: black !important;
        }

        .datePicker .calDays .selectedDate {
            background-color: #005fb2 !important;    
            color: white !important;
        }

        .datePicker .calDays .highlight {
            background: none;
        }

        .dateFormat {
            display: none;
        }

        .calButton {
            height: 14px !important;
            width: 9px !important;
            margin-top: 2px !important;
            margin-right: 10px !important;
            margin-left: 10px !important;
            cursor: pointer !important;
            padding-left:2px;
            padding-right:2px;
        }

        .calButtonRight {
            border-left: 7px solid #706e6b;
            border-top: 7px solid transparent;
            border-bottom: 7px solid transparent;
        }

        .calButtonLeft {
            border-right: 7px solid #706e6b;
            border-top: 7px solid transparent;
            border-bottom: 7px solid transparent;
        }

        .calButtonRight:hover {
            border-left: 7px solid #005fb2;
        }

        .calButtonLeft:hover {
            border-right: 7px solid #005fb2;
        }

        .dateBar {
            padding-top: 4px !important;
        }

        @media screen and (max-width: 1800px) and (min-width: {!JSENCODE(mobileScreenWidthSmaller)}px) {
            .master-btn-container {
                right: 0;
                left: 0;
                text-align: center;
            }

            .detail-col.label-col {
                width: 30%;
            }

            .detail-col.value-col {
                width: 70%;
            }
        }

        @media screen and (max-width: 1400px) and (min-width: {!JSENCODE(mobileScreenWidth)}px) {
            .detail-col.label-col {
                width: 35%;
            }

            .detail-col.value-col {
                width: 65%;
            }
        }

        @media screen and (max-width: {!JSENCODE(mobileScreenWidth)}px) and (min-width: {!JSENCODE(mobileScreenWidthSmaller)}px) {
            .case-card {
                min-width: calc((100% / {!JSENCODE(maxCasesDisplayedMobile)}) - 1.5rem);
                width: calc((100% / {!JSENCODE(maxCasesDisplayedMobile)}) - 1.5rem);

                /** Compatibility Fallbacks **/
                min-width: -moz-calc((100% / {!JSENCODE(maxCasesDisplayedMobile)}) - 1.5rem);
                width: -moz-calc((100% / {!JSENCODE(maxCasesDisplayedMobile)}) - 1.5rem);
                min-width: -webkit-calc((100% / {!JSENCODE(maxCasesDisplayedMobile)}) - 1.5rem);
                width: -webkit-calc((100% / {!JSENCODE(maxCasesDisplayedMobile)}) - 1.5rem);
            }
        }

        @media screen and (max-width: {!JSENCODE(mobileScreenWidthSmaller)}px) {
            .case-card {
                min-width: calc((100% / {!JSENCODE(maxCasesDisplayedMobileSmaller)}) - 1.5rem);
                width: calc((100% / {!JSENCODE(maxCasesDisplayedMobileSmaller)}) - 1.5rem);

                /** Compatibility Fallbacks **/
                min-width: -moz-calc((100% / {!JSENCODE(maxCasesDisplayedMobileSmaller)}) - 1.5rem);
                width: -moz-calc((100% / {!JSENCODE(maxCasesDisplayedMobileSmaller)}) - 1.5rem);
                min-width: -webkit-calc((100% / {!JSENCODE(maxCasesDisplayedMobileSmaller)}) - 1.5rem);
                width: -webkit-calc((100% / {!JSENCODE(maxCasesDisplayedMobileSmaller)}) - 1.5rem);
            }
        }

        @media screen and (max-width: {!JSENCODE(mobileScreenWidthSmallest)}px) {
            .master-btn-container {
                right: 0;
                left: 0;
                text-align: center;
            }

            .scroll-btn-container {
                margin: 0 0.25rem;
            }

            .scroll-btn-container button.scroll-btn {
                width: 1.5rem;
            }

            .detail-col {
                padding-bottom: 0;
            }

            .detail-col.label-col {
                width: 100%;
            }

            .detail-col.value-col {
                width: 100%;
                padding-bottom: 1rem;
            }

            .field-label {
                text-align: left;
            }

            .obj-checkbox {
                width:100%;
                flex: 1 0 100%;
            }

            .tooltip .tooltiptext {
                width:175px;
            }

            .field-label-colon {
                display: none;
            }

            .toggle-link {
                bottom: 0;
            }
        }

        .textarea-wrapper {
            height: 100%;
        }

        .standard-textarea {
            resize: none !important;
            height: 100% !important;
        }
    </style>

    <div class="slds-scope">
        <div id="action-overlay">
            <div class="slds-backdrop slds-backdrop_open white-backdrop" style="display:flex;">
                <div class="slds-align_absolute-center">
                    <div role="status" class="slds-spinner slds-spinner_large slds-spinner_brand overlay-spinner">
                        <div class="slds-spinner__dot-a"></div>
                        <div class="slds-spinner__dot-b"></div>
                    </div>
                </div>
            </div>
        </div>
        <c:CsMrgPageHeader title="Merge Cases" showContactUsButton="false"/>
        <c:PageAlert id="pageAlert"/>
        <apex:form id="frm">
            <apex:actionFunction action="{!csmerge}" name="mergeCases" oncomplete="handleMergeCasesOnComplete()" rerender="apex2js"/>
            <!-- When a lookup field is updated and it has related fields showing on the card, update those fields as well. Note this only applies to 
                references that lookup to 1 object. Instead of re-rendering the card we rerender a separate div and use javascript to copy the html over -->
            <apex:actionFunction action="{!requeryReferenceSObject}" name="requerySObject" oncomplete="handleRequerySObjectOnComplete()" rerender="hiddenRefSObjectFields, apex2js">
                <apex:param id="param1" assignTo="{!refObjBase}" name="objAPIBase" value=""/>
                <apex:param id="param2" assignTo="{!refObjId}" name="objId" value=""/>
            </apex:actionFunction>
            <apex:actionFunction action="{!navigateOnMergeSuccess}" name="navigateOnMergeSuccess"/>
            <apex:actionFunction action="{!updateCaseWrapperEditability}" name="checkCaseEditability" oncomplete="handleCaseEditabilityCheckOnComplete()" rerender="apex2js">
                <apex:param id="param3" assignTo="{!editabilityCheckCaseId}" name="checkCaseId" value=""/>
            </apex:actionFunction>
            <apex:actionFunction action="{!list}" name="returnToListView"/>
            <apex:actionFunction action="{!initialValidation}" name="runInitialValidation" oncomplete="handleInitialValidationOnComplete()" rerender="apex2js"/>

            <apex:outputPanel id="content">
                <apex:inputHidden value="{!masterCaseId}" id="h__masterCaseId"/>
                <input type="hidden" id="h__modalCaseId" value=""/>
                <input type="hidden" id="h__modalCaseField" value=""/>
                <div id="merge-select" class="slds-grid slds-m-top_medium">
                    <div class="scroll-btn-container">
                        <button id="previous-case-btn" type="button" class="slds-button slds-button_icon slds-button_icon-border-filled scroll-btn hidden-btn" onclick="handlePreviousCaseBtnOnClick(event)" title="Previous Case">
                            <img src="{!URLFOR($Resource.CaseMergePremiumAssets,'case-merge-premium-assets/img/custom-icons/icons/utility/left_orange_hollow_60.png')}" alt="left"/>  
                        </button>
                    </div>
                    <div id="case-cards-viewport">
                        <div id="case-cards-container" class="slds-grid slds-gutters">
                            <apex:repeat value="{!mergeCases}" var="csw">
                                <div class="case-card" data-master="{!csw.newCase.Id == masterCaseId}" data-removed="{!csw.isRemoved}" data-case-id="{!csw.newCase.Id}" data-record-type-id="{!IF(CASE_HAS_ACTIVE_RECORD_TYPES, csw.newCase['RecordTypeId'], '')}">
                                    <div class="case-card-header">
                                        <div class="primary-case-btn-container">
                                            <button type="button" onclick="handleMasterCaseBtnOnClick(event)" data-case-id="{!csw.newCase.id}" style="{!IF(UPDATE_MASTER_PERMISSION == true, ' display;block', ' display:none;')}" class="{!'slds-button slds-button_brand primary-case-btn' + IF(csw.newCase.id == masterCaseId, ' expanded', '')}">
                                                <span>{!IF(csw.newCase.Id == masterCaseId, 'Primary Case', 'Set as Primary')}</span>
                                            </button>
                                            <div class="{!IF(csw.newCase.Id == masterCaseId, 'primary-banner', 'child-banner')}" style="{!IF(UPDATE_MASTER_PERMISSION == false, ' display;block', ' display:none;')}">{!IF(csw.newCase.Id == masterCaseId, 'Primary Case', 'Child Case')}</div>
                                        </div>
                                        <div class="remove-case-btn-container">
                                            <button type="button" onclick="handleRemoveCaseBtnOnClick(event)" data-case-id="{!csw.newCase.id}" class="{!'slds-button slds-button_icon remove-case-btn' + IF(csw.newCase.id != masterCaseId, ' expanded', '') + IF(mergeCases.size < 3, ' slds-hide', '')}" title="Remove Case from the Merge">
                                                <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                                    <path d="M14.3 11.7l6-6c.3-.3.3-.7 0-1l-.9-1c-.3-.2-.7-.2-1 0l-6 6.1c-.2.2-.5.2-.7 0l-6-6.1c-.3-.3-.7-.3-1 0l-1 1c-.2.2-.2.7 0 .9l6.1 6.1c.2.2.2.4 0 .6l-6.1 6.1c-.3.3-.3.7 0 1l1 1c.2.2.7.2.9 0l6.1-6.1c.2-.2.4-.2.6 0l6.1 6.1c.2.2.7.2.9 0l1-1c.3-.3.3-.7 0-1l-6-6c-.2-.2-.2-.5 0-.7z"></path>
                                                </svg>
                                                <span class="slds-assistive-text">Close</span>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="case-card-details">
                                        <div class="slds-grid slds-wrap slds-gutters">

                                            <!-- 
                                                Case Number: Not Included in the field wrapper fields since it contains a link to the case (like a lookup) 
                                                but is not a lookup field.
                                            -->
                                            <div class="detail-col label-col">
                                                <div data-field="{!$ObjectType.Case.fields.CaseNumber.Name}" class="field-label">
                                                    <apex:outputText value="{!$ObjectType.Case.fields.CaseNumber.Label}"/><span class="field-label-colon">:</span>
                                                </div>
                                            </div>
                                            <div class="detail-col value-col">
                                                <div class="field-value">
                                                    <!-- Case Number Link for Console-->
                                                    <a href="javascript:void(0)" class="case-number-link slds-hide" data-for-console="true" data-case-id="{!csw.oldCase.Id}" title="View Case" onclick="handleCaseNumberLinkOnClick(event)">{!csw.oldCase.CaseNumber}</a>

                                                    <!-- Case Number Link for Non-Console -->
                                                    <a href="/{!csw.oldCase.id}" class="case-number-link slds-hide" target="_blank" data-for-console="false" title="View Case">{!csw.oldCase.CaseNumber}</a>
                                                </div>
                                            </div>

                                            <!-- Created Date and Field Set Fields -->
                                            <apex:repeat value="{!mergeFields}" var="f">
                                                <!--
                                                    An Explanation for "outputFieldFieldName": So for an unknown reason, using csw.oldCase[f.Name] in the "detail-read" div's outputField will cause a 
                                                    visualforce error IF the field name is for a relationship (e.g. Contact.AccountId). Setting the value of "f.Name" to a variable and using that variable fixes this. I've checked in the past, and both values are exactly the same, but the
                                                    apex:variable is the only one that works.
                                                -->
                                                <apex:variable value="{!f.Name}" var="outputFieldFieldName"/>
                                                    <apex:outputPanel layout="none" rendered="{!f.canRead}">
                                                        <div class="detail-col label-col">
                                                            <div data-field="{!f.Name}" class="field-label">
                                                                <apex:outputText value="{!IF(f.isRelatedField, f.label + ' (' + f.relatedFieldObjLabel + ')', f.label)}"/><span class="field-label-colon">:</span>
                                                            </div>
                                                        </div>
                                                        <!--
                                                            data-can-read -> User has read access for the field
                                                            data-can-edit-field -> User has edit access for the field
                                                            data-can-edit-case -> User has edit access for the case
                                                            data-case-id -> Id of the case
                                                            data-field-label -> Label of the field
                                                            data-field-name -> Name of the field
                                                            data-field-type -> Schema.DisplayType of the field as a lowercase string
                                                            data-is-name-pointing -> If true, this lookup can points to 2 different objects. Currently, if this is true, you can not requery values.
                                                            data-original-value -> The case's original value for the field. For lookups, this is the id of the field. This value is blank for textarea, date, and date time fields.
                                                            data-original-reference-label -> The case's original value for the name of a lookup record. This field is blank unless the field is a lookup field
                                                            data-ref-obj -> The name of the related object this field is on. Blank if the field is not a relationship field (e.g. Contact.AccountId)
                                                            data-ref-obj-related-field-count -> The number of related fields this reference field is tied to.
                                                            data-lookup-base -> if the field is a reference field, the name of the field without the 'Id' on the end of it. If it's a custom field it replaces the final '__c' with '__r'.
                                                            data-related-field-base -> if the field is a related field, points to the name of the reference field that called it. It should match it's corresponding lookup field's lookup base.
                                                            data-has-overflow ->  do the contents of this value wrapper take up more room than the maximum space available
                                                            data-state -> determins if custom edit is being used or not.
                                                        -->
                                                        <div class="detail-col value-col"
                                                            data-is-value-wrapper="true"
                                                            data-can-read="{!f.canRead}"
                                                            data-can-edit-field="{!f.canEdit}"
                                                            data-can-edit-case="{!csw.canEdit}"
                                                            data-case-id="{!csw.oldCase.Id}"
                                                            data-field-label="{!f.label}"
                                                            data-field-name="{!f.Name}"
                                                            data-field-type="{!f.fieldType}"
                                                            data-is-name-pointing="{!f.isNamePointing}"
                                                            data-original-value="{!IF(NOT(OR(f.isTextArea, f.isDate, f.isDateTime, f.isTime)), csw.oldCase[f.Name], '')}"
                                                            data-original-reference-label="{!IF(f.isReference, csw.oldCase[f.lookupNameSOQLName], '')}" 
                                                            data-ref-obj="{!f.relatedFieldObj}"
                                                            data-ref-obj-related-field-count="{!IF(f.isReference && !f.isRelatedField, refObjFieldsCount[f.lookupBase], 0)}"
                                                            data-lookup-base="{!f.lookupBase}"
                                                            data-related-field-base="{!f.relatedFieldBase}"
                                                            data-has-overflow="false"
                                                            data-state="initial">

                                                            <div class="value-wrapper-content">
                                                                <div class="slds-grid">
                                                                    <div class="slds-size_3-of-4">
                                                                        <div class="{!'detail-read' + IF(NOT(csw.canEdit) || NOT(f.canEdit) || ((f.canEdit && (csw.oldCase.Id != masterCaseId || f.isTextArea || (f.srcCaseOptions.size == 1 && NOT(f.isCheckbox) && NOT(f.isMultiPicklist))))), '', ' slds-hide')}">
                                                                            <apex:outputPanel layout="none" rendered="{!f.canRead}">
                                                                                <div data-field="{!f.Name}" data-value="{!csw.oldCase[f.Name]}" data-show-all="false" class="field-value">

                                                                                    <div class="{!'value-outputField' + IF(f.isReference && (NOT(f.isReference) || masterCaseId == csw.oldCase.Id), ' slds-hide', '')}" data-is-reference="{!f.isReference}">
                                                                                        <apex:outputPanel layout="none" rendered="{!f.isReference}">
                                                                                            <span class="outputField slds-hide" data-for-console="false">
                                                                                                <apex:outputField value="{!csw.oldCase[outputFieldFieldName]}"/>
                                                                                            </span>
                                                                                            <span class="outputField slds-hide" data-for-console="true" data-lookup-id="{!csw.oldCase[outputFieldFieldName]}">
                                                                                                <apex:outputField value="{!csw.oldCase[outputFieldFieldName]}"/>
                                                                                            </span>
                                                                                        </apex:outputPanel>
                                                                                        <apex:outputPanel layout="none" rendered="{!NOT(f.isReference) && NOT(f.isCheckbox)}">
                                                                                            <apex:outputField value="{!csw.oldCase[outputFieldFieldName]}"/>
                                                                                        </apex:outputPanel>
                                                                                        <apex:outputPanel layout="none" rendered="{!f.isCheckbox}">
                                                                                            <div class="slds-form-element">
                                                                                                <div class="slds-form-element__control">
                                                                                                    <div class="slds-checkbox">
                                                                                                        <apex:outputPanel layout="none" rendered="{!csw.oldCase[outputFieldFieldName] == true}">
                                                                                                            <input type="checkbox" name="options" id="{!csw.oldCase.Id}-{!f.name}-checkbox" disabled="disabled" checked="checked" />
                                                                                                            <label class="slds-checkbox__label" for="{!csw.oldCase.Id}-{!f.name}-checkbox">
                                                                                                                <span class="slds-checkbox_faux"></span>
                                                                                                            </label>
                                                                                                        </apex:outputPanel>
                                                                                                        <!-- Note: Removing == false will break the page because it thinks oldCase's value is a string.
                                                                                                            Not sure why -->
                                                                                                        <apex:outputPanel layout="none" rendered="{!csw.oldCase[outputFieldFieldName] == false}">
                                                                                                            <input type="checkbox" name="options" id="{!csw.oldCase.Id}-{!f.name}-checkbox" disabled="disabled"/>
                                                                                                            <label class="slds-checkbox__label" for="{!csw.oldCase.Id}-{!f.name}-checkbox">
                                                                                                                <span class="slds-checkbox_faux"></span>
                                                                                                            </label>
                                                                                                        </apex:outputPanel>
                                                                                                    </div>
                                                                                                </div>
                                                                                            </div>
                                                                                        </apex:outputPanel>
                                                                                    </div>

                                                                                    <div class="{!'value-outputText' + IF(NOT(f.isReference) || (f.isReference &&  masterCaseId != csw.oldCase.Id), ' slds-hide', '')}">
                                                                                        <apex:outputPanel layout="none" rendered="{!f.isReference}">
                                                                                            <apex:outputText value="{!csw.oldCase[f.lookupNameSOQLName]}"/>
                                                                                        </apex:outputPanel>
                                                                                    </div>

                                                                                    <!-- Re-rendering the card will cause a load of issues. Instead we rerender a separate div and move the html here -->
                                                                                    <div class="value-requeried slds-hide" data-field-name="{!f.name}">
                                                                                        <apex:outputPanel layout="none" rendered="{!f.isRelatedField}">
                                                                                            <div>
                                                                                                <!-- Filled in via js -->
                                                                                            </div>
                                                                                        </apex:outputPanel>
                                                                                    </div>

                                                                                    <!-- Re-rendering the card will cause a load of issues. Instead we copy the value from the textarea modal's input and
                                                                                        move the html here -->
                                                                                    <div class="value-updated-textarea slds-hide">
                                                                                        <!-- Filled in via js -->
                                                                                    </div>

                                                                                </div>
                                                                            </apex:outputPanel>
                                                                        </div>
                    
                                                                        <div class="{!'detail-edit-src-cases' + IF(NOT(NOT(csw.canEdit) || NOT(f.canEdit) || ((f.canEdit && (csw.oldCase.Id != masterCaseId || f.isTextArea || (f.srcCaseOptions.size == 1 && NOT(f.isCheckbox) && NOT(f.isMultiPicklist)))))), '', ' slds-hide')}">
                                                                            <apex:outputPanel layout="none" rendered="{!f.canEdit}">
                                                                                <div class="case-input">
                                                                                    <apex:outputPanel layout="none" rendered="{!NOT(f.isTextArea) && NOT(f.isCheckbox) && NOT(f.isMultiPicklist)}">
                                                                                        <apex:inputHidden id="h__srcCasesValue" value="{!csw.newCase[f.Name]}" rendered="{!NOT(OR(f.isDate, f.isDateTime, f.isTime))}"/>
                                                                                        <!-- Input Fields for Date and Date Time Fields: These field's values are modified/reference via JavaScript and are not visible to the user -->
                                                                                        <apex:inputField id="h__srcCasesValue_Date" value="{!csw.newCase[f.Name]}" rendered="{!OR(f.isDate, f.isDateTime)}" styleClass="slds-hide"/>
                                                                                        <apex:inputField id="h__originalValue_Date" value="{!csw.oldCase[f.Name]}" rendered="{!OR(f.isDate, f.isDateTime)}" styleClass="slds-hide"/>
                                                                                        <apex:inputField id="h__srcCasesValue_Time" value="{!csw.newCase[f.Name]}" rendered="{!f.isTime}" styleClass="slds-hide"/>
                                                                                        <apex:inputField id="h__originalValue_Time" value="{!csw.oldCase[f.Name]}" rendered="{!f.isTime}" styleClass="slds-hide"/>
                                                                                        <div class="slds-form-element">
                                                                                            <div class="slds-select_container">
                                                                                                <select onchange="handleEditInputOnChange(event)" class="src-cases-select" data-field-name="{!f.Name}" data-original-value="{!IF(NOT(OR(f.isTextArea, f.isDate, f.isDateTime, f.isTime)), csw.oldCase[f.Name], '')}" data-field-type="{!f.fieldType}" data-ref-obj="{!f.lookupSObjectName}" size="1">
                                                                                                    <apex:repeat value="{!f.srcCaseOptions}" var="opt">
                                                                                                        <apex:outputPanel layout="none" rendered="{!opt.value == csw.newCase[f.Name]}">
                                                                                                            <option value="{!opt.value}" selected="selected">{!opt.label}</option>
                                                                                                        </apex:outputPanel>
                                                                                                        <apex:outputPanel layout="none" rendered="{!opt.value != csw.newCase[f.Name]}">
                                                                                                            <option value="{!opt.value}">{!opt.label}</option>
                                                                                                        </apex:outputPanel>
                                                                                                    </apex:repeat>
                                                                                                </select>
                                                                                            </div>
                                                                                        </div>
                                                                                    </apex:outputPanel>

                                                                                    <apex:outputPanel layout="none" rendered="{!f.isCheckbox}">
                                                                                        <div class="slds-checkbox">
                                                                                            <apex:inputField id="checkbox-value" styleClass="edit-checkbox" value="{!csw.dummyCase[f.Name]}" onchange="handleEditInputOnChange(event);"/>
                                                                                            <apex:outputLabel for="checkbox-value" styleClass="slds-checkbox__label">
                                                                                                <span class="slds-checkbox_faux"></span>
                                                                                            </apex:outputLabel>
                                                                                        </div>
                                                                                    </apex:outputPanel>

                                                                                    <apex:outputPanel layout="none" rendered="{!f.isMultiPicklist}">
                                                                                        <apex:inputField html-data-field-type="{!f.fieldType}" html-data-field-name="{!f.Name}" value="{!csw.dummyCase[f.Name]}" onchange="handleEditInputOnChange(event);"/>
                                                                                    </apex:outputPanel>
                                                                                </div>
                                                                            </apex:outputPanel>
                                                                        </div>
                    
                                                                        <div class="detail-edit-src-all slds-hide">
                                                                            <apex:outputPanel layout="none" rendered="{!f.canEdit}">
                                                                                <apex:outputPanel layout="none" rendered="{!NOT(f.isTextArea) && NOT(f.isCheckbox) && NOT(f.isMultiPicklist)}">
                                                                                    <div class="case-input">
                                                                                        <div class="slds-form-element">
                                                                                            <apex:outputPanel layout="none" rendered="{!f.fieldType != 'picklist'}">
                                                                                                <input class="last-reference-field-value" type="hidden" value="{!IF(csw.dummyCase[f.Name] == null, '000000000000000', csw.dummyCase[f.Name])}"/>
                                                                                                <apex:inputField html-data-field-type="{!f.fieldType}" html-data-field-name="{!f.Name}" value="{!csw.dummyCase[f.Name]}" html-data-ref-obj="{!f.lookupSObjectName}"/>
                                                                                            </apex:outputPanel>
                                                                                            <apex:outputPanel layout="none" rendered="{!f.isPicklist}">
                                                                                                <div class="slds-select_container">
                                                                                                    <apex:inputField html-data-field-type="{!f.fieldType}" value="{!csw.dummyCase[f.Name]}" onchange="handleEditInputOnChange(event)"/>
                                                                                                </div>
                                                                                            </apex:outputPanel>
                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="case-messages">
                                                                                        <span class="slds-text-color_error"></span>
                                                                                    </div>
                                                                                </apex:outputPanel>
                                                                            </apex:outputPanel>
                                                                        </div>
                                                                    </div>
                                                                    <div class="slds-size_1-of-4 slds-grid field-icons">
                                                                        <!-- Use a custom value for a field -->
                                                                        <div class="{!'slds-align-middle edit-custom' + IF(csw.oldCase.Id == masterCaseId, '', ' slds-hide')}">
                                                                            <apex:outputPanel layout="none" rendered="{!f.canEdit && NOT(f.isCheckbox) && NOT(f.isMultiPicklist)}">
                                                                                <div class="{!'edit-custom-btn-wrapper' + IF(NOT(csw.canEdit), ' el-invisible', '')}">
                                                                                    <button type="button" class="slds-button slds-button_icon edit-custom-btn" onclick="handleEditCustomBtnOnClick(event);" data-field-type="{!f.fieldType}" data-rich-text="{!f.isRichText}" title="Choose Your Own {!f.label}">
                                                                                        <svg id="edit" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="slds-icon slds-icon-text-light slds-icon_x-small">
                                                                                            <path d="M4.4 15.4l4.1 4.1c.2.2.5.2.6 0L19.4 9.2c.2-.2.2-.4 0-.6l-4.1-4.1c-.2-.2-.4-.2-.6 0L4.4 14.8c-.2.2-.2.5 0 .6zM16.7 2.6c-.2.2-.2.5 0 .7l4 4c.2.2.5.2.7 0l1.1-1.1c.8-.7.8-1.8 0-2.6l-2.1-2.1c-.8-.8-1.9-.8-2.7 0l-1 1.1zM1 22.2c-.1.5.3.9.8.8l5-1.2c.2 0 .3-.1.4-.2l.1-.1c.1-.1.1-.4-.1-.6l-4.1-4.1c-.2-.2-.5-.2-.6-.1l-.1.1c-.1.1-.2.3-.2.4l-1.2 5z"></path>
                                                                                        </svg>
                                                                                    </button>
                                                                                </div>
                                                                            </apex:outputPanel>
                                                                            
                                                                            <apex:outputPanel layout="none" rendered="{!NOT(f.canEdit) || f.isCheckbox || f.isMultiPicklist}">
                                                                                <!-- Leave space so the "ref-tab" buttons line up -->
                                                                                <div style="width: 1.125rem; height: 1.125rem;"></div>
                                                                            </apex:outputPanel>
                                                                        </div>
                
                                                                        <!-- Open a reference field in a new tab -->
                                                                        <div class="{!'slds-align-middle ref-tab' + IF(csw.oldCase.Id == masterCaseId, '', ' slds-hide')}">
                                                                            <apex:outputPanel layout="none" rendered="{!f.canRead && f.isReference}">
                                                                                <!-- Button is used for Console -->
                                                                                <a href="javascript:void(0)" onclick="handleReferenceTabLinkOnClick(event)" class="reference-tab-link slds-hide" data-for-console="true" data-reference-id="{!csw.newCase[f.Name]}" title="View Record">
                                                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="new_window" class="slds-icon slds-icon_x-small">
                                                                                        <path d="M22.5.9h-8.8c-.4 0-.8.3-.8.6v1.4c0 .4.3.8.8.8h3.6c.4 0 .7.5.3.7l-7.8 7.9c-.3.3-.3.7 0 .9l1 1c.2.3.6.3.9 0l7.9-7.8c.2-.3.7-.1.7.3v3.6c0 .4.4.8.7.8h1.4c.4 0 .7-.4.7-.8V1.6c0-.4-.3-.7-.6-.7zm-5.7 10.9l-1.6 1.6c-.3.3-.4.6-.4 1v5.2c0 .4-.4.7-.7.7H4.4c-.4 0-.7-.3-.7-.7V9.9c0-.3.3-.7.7-.7h5.3c.4 0 .7-.1 1-.4l1.5-1.6c.3-.2.1-.7-.3-.7H2.8c-1 0-1.9.8-1.9 1.8v12.9c0 1 .9 1.9 1.9 1.9h12.9c1 0 1.8-.9 1.8-1.9v-9.1c0-.4-.5-.6-.7-.3z"></path>
                                                                                    </svg>
                                                                                </a>

                                                                                <!-- Link is used for Non-Console -->
                                                                                <a href="/{!csw.newCase[f.Name]}" class="reference-tab-link slds-hide" target="_blank" title="View Record" data-for-console="false" data-reference-id="{!csw.newCase[f.Name]}">
                                                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="new_window" class="slds-icon slds-icon_x-small">
                                                                                        <path d="M22.5.9h-8.8c-.4 0-.8.3-.8.6v1.4c0 .4.3.8.8.8h3.6c.4 0 .7.5.3.7l-7.8 7.9c-.3.3-.3.7 0 .9l1 1c.2.3.6.3.9 0l7.9-7.8c.2-.3.7-.1.7.3v3.6c0 .4.4.8.7.8h1.4c.4 0 .7-.4.7-.8V1.6c0-.4-.3-.7-.6-.7zm-5.7 10.9l-1.6 1.6c-.3.3-.4.6-.4 1v5.2c0 .4-.4.7-.7.7H4.4c-.4 0-.7-.3-.7-.7V9.9c0-.3.3-.7.7-.7h5.3c.4 0 .7-.1 1-.4l1.5-1.6c.3-.2.1-.7-.3-.7H2.8c-1 0-1.9.8-1.9 1.8v12.9c0 1 .9 1.9 1.9 1.9h12.9c1 0 1.8-.9 1.8-1.9v-9.1c0-.4-.5-.6-.7-.3z"></path>
                                                                                    </svg>
                                                                                </a>
                                                                            </apex:outputPanel>
                                                                        </div>

                                                                        <!-- Confirm using a custom value for a field -->
                                                                        <div class="slds-align-middle edit-confirm slds-hide">
                                                                            <apex:outputPanel layout="none" rendered="{!f.canEdit && NOT(f.isCheckbox) && NOT(f.isMultiPicklist)}">
                                                                                <button type="button" class="slds-button edit-btn edit-confirm-btn" onclick="handleEditConfirmBtnOnClick(event)" title="Confirm Changes">
                                                                                    <svg class="slds-icon" viewBox="0 0 24 24">
                                                                                        <path d="M8.8 19.6L1.2 12c-.3-.3-.3-.8 0-1.1l1-1c.3-.3.8-.3 1 0L9 15.7c.1.2.5.2.6 0L20.9 4.4c.2-.3.7-.3 1 0l1 1c.3.3.3.7 0 1L9.8 19.6c-.2.3-.7.3-1 0z"></path>
                                                                                    </svg>        
                                                                                </button>
                                                                            </apex:outputPanel>
                                                                        </div>

                                                                        <!-- Cancel using a custom value for a field -->
                                                                        <div class="slds-align-middle edit-cancel slds-hide">
                                                                            <apex:outputPanel layout="none" rendered="{!f.canEdit && NOT(f.isCheckbox) && NOT(f.isMultiPicklist)}">
                                                                                <button type="button" class="slds-button edit-btn edit-cancel-btn" onclick="handleEditCancelBtnOnClick(event)" title="Cancel">
                                                                                    <svg class="slds-icon" viewBox="0 0 24 24">
                                                                                        <path d="M14.3 11.7l6-6c.3-.3.3-.7 0-1l-.9-1c-.3-.2-.7-.2-1 0l-6 6.1c-.2.2-.5.2-.7 0l-6-6.1c-.3-.3-.7-.3-1 0l-1 1c-.2.2-.2.7 0 .9l6.1 6.1c.2.2.2.4 0 .6l-6.1 6.1c-.3.3-.3.7 0 1l1 1c.2.2.7.2.9 0l6.1-6.1c.2-.2.4-.2.6 0l6.1 6.1c.2.2.7.2.9 0l1-1c.3-.3.3-.7 0-1l-6-6c-.2-.2-.2-.5 0-.7z"></path>
                                                                                    </svg>
                                                                                </button>
                                                                            </apex:outputPanel>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <a class="toggle-link" href="javascript:void(0)" onclick="handleToggleLinkOnClick(event)">Show More</a>
                                                        </div>
                                                    </apex:outputPanel>                   
                                            </apex:repeat>
                                        </div>
                                    </div>
                                    <div class="case-card-hidden-details slds-hide">
                                        <apex:inputHidden id="h__isRemoved" value="{!csw.isRemoved}"/>
                                    </div>
                                    <div class="case-card-spinner slds-spinner_container slds-hide">
                                        <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                                            <span class="slds-assistive-text">Loading</span>
                                            <div class="slds-spinner__dot-a"></div>
                                            <div class="slds-spinner__dot-b"></div>
                                        </div>
                                    </div>
                                </div>
                            </apex:repeat>
                        </div>
                    </div>
                    <div class="scroll-btn-container">
                        <button id="next-case-btn" type="button" class="{!'slds-button slds-button_icon slds-button_icon-border-filled scroll-btn' + IF(mergeCases.size <= 3, ' hidden-btn','')}" onclick="handleNextCaseBtnOnClick(event)" title="Next Case">
                            <img src="{!URLFOR($Resource.CaseMergePremiumAssets,'case-merge-premium-assets/img/custom-icons/icons/utility/right_orange_hollow_60.png')}" alt="right"/>  
                        </button>
                    </div>
                </div>
                <apex:outputPanel >
                    <div class="slds-grid">
                        <!-- Clean Merge -->
                        <apex:outputPanel layout="block" styleClass="slds-col slds-grow-none" rendered="{!CLEAN_MERGE_ENABLED}">
                            <div class="{!'slds-m-left_xx-large slds-m-top_medium slds-m-bottom_medium' + IF(prefList.empty, ' slds-hide', '')}">
                                <span class="slds-checkbox">
                                    <apex:inputCheckbox value="{!DO_CLEAN_MERGE}" id="cleanMrgBox" onchange="handleCleanMergeCheckboxOnChange(event)" />
                                    <apex:outputLabel styleClass="slds-checkbox__label" for="{!$Component.cleanMrgBox}">
                                        <span class="slds-checkbox_faux"></span>
                                        <apex:outputText styleClass="bold slds-m-left_x-small" value="Clean Merge"/>
                                    </apex:outputLabel>
                                    <div class="tooltip">
                                        <button class="slds-button slds-button_icon tooltip-button" type="button" style="background:url('{!URLFOR($Resource.CaseMergePremiumAssets, 'case-merge-premium-assets/img/custom-icons/icons/utility/tooltip_60.png')}');"/>
                                        <span class="tooltiptext tooltip_top">
                                            <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip">
                                                <div class="slds-popover__body">Enable this option to close each child case without cloning or reparenting any objects. Nothing will be transferred to the primary case.</div>
                                            </div>
                                        </span>
                                    </div>
                                </span>
                            </div>
                        </apex:outputPanel>

                        <!-- Async Merge -->
                        <div class="slds-col slds-grow-none">
                            <div class="slds-m-left_xx-large slds-m-top_medium slds-m-bottom_medium">
                                <span class="slds-checkbox">
                                    <apex:inputCheckbox value="{!doAsyncMerge}" id="asyncMergeCheckbox"/>
                                    <apex:outputLabel styleClass="slds-checkbox__label" for="{!$Component.asyncMergeCheckbox}">
                                        <span class="slds-checkbox_faux"></span>
                                        <apex:outputText styleClass="bold slds-m-left_x-small" value="Run Asynchronously?"/>
                                    </apex:outputLabel>
                                    <div class="tooltip">
                                        <button class="slds-button slds-button_icon tooltip-button" type="button" style="background:url('{!URLFOR($Resource.CaseMergePremiumAssets, 'case-merge-premium-assets/img/custom-icons/icons/utility/tooltip_60.png')}');"/>
                                        <span class="tooltiptext tooltip_top">
                                            <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip">
                                                <div class="slds-popover__body">Only check this setting if are experiencing Apex CPU Time Limits.</div>
                                            </div>
                                        </span>
                                    </div>
                                </span>
                            </div>

                        </div>
                    </div>

                    <apex:outputPanel layout="block" styleClass="slds-section slds-is-open slds-p-horizontal_small" rendered="{!AD_HOC_PREFS_ENABLED && !prefList.empty}">
                        <h3 class="slds-section__title">
                            <span class="slds-truncate slds-p-horizontal_small" title="Choose which objects will be cloned to the parent case">Choose which objects will be cloned to the parent case</span>
                        </h3>
                        <div aria-hidden="false" class="slds-section__content slds-p-horizontal_small slds-p-bottom_small" id="clone-objects-section">
                            <div id="object-control-links" class="{!IF(DO_CLEAN_MERGE, 'slds-hide', '')}">
                                <a href="javascript:void(0)" onclick="handleSelectAllLinkOnClick(event)" title="Select all Objects">Select All</a>
                                <span>&nbsp;|&nbsp;</span>
                                <a href="javascript:void(0)" onclick="handleUnselectAllLinkOnClick(event)" title="Unselect all Objects">Unselect All</a>
                            </div>
                            <div class="slds-grid slds-wrap slds-m-top_small">
                                <apex:variable value="{!0}" var="prefCounter"/>
                                <apex:repeat value="{!prefList}" var="pref">
                                    <apex:inputHidden id="h__prefEnabled" value="{!pref.enabled}"/>
                                    <div class="obj-checkbox">
                                        <span class="slds-checkbox">
                                            <apex:outputPanel layout="none" rendered="{!NOT(DO_CLEAN_MERGE)}">
                                                <apex:outputPanel layout="none" rendered="{!pref.enabled}">
                                                    <input type="checkbox" id="pref-box-{!prefCounter}" class="pref-box" data-hidden-id="{!$Component.h__prefEnabled}" onchange="handlePrefBoxOnChange(event)" checked="true"/>
                                                    <label class="slds-checkbox__label" for="pref-box-{!prefCounter}">
                                                        <span class="slds-checkbox_faux"></span>
                                                        <apex:outputText styleClass="bold slds-m-left_x-small" value="{!pref.label}"/>
                                                    </label>
                                                </apex:outputPanel>
                                                <apex:outputPanel layout="none" rendered="{!NOT(pref.enabled)}">
                                                    <input type="checkbox" id="pref-box-{!prefCounter}" class="pref-box" data-hidden-id="{!$Component.h__prefEnabled}" onchange="handlePrefBoxOnChange(event)"/>
                                                    <label class="slds-checkbox__label" for="pref-box-{!prefCounter}">
                                                        <span class="slds-checkbox_faux"></span>
                                                        <apex:outputText styleClass="bold slds-m-left_x-small" value="{!pref.label}"/>
                                                    </label>
                                                </apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!DO_CLEAN_MERGE}">
                                                <input type="checkbox" id="pref-box-{!prefCounter}" class="pref-box" data-hidden-id="{!$Component.h__prefEnabled}" onchange="handlePrefBoxOnChange(event)" disabled="true" data-old-value="{!pref.enabled}"/>
                                                <label class="slds-checkbox__label" for="pref-box-{!prefCounter}">
                                                    <span class="slds-checkbox_faux"></span>
                                                    <apex:outputText styleClass="bold slds-m-left_x-small" value="{!pref.label}"/>
                                                </label>
                                            </apex:outputPanel>
                                        </span>
                                    </div>
                                    <apex:variable value="{!prefCounter + 1}" var="prefCounter"/>
                                </apex:repeat>
                            </div>
                        </div>
                    </apex:outputPanel>
                </apex:outputPanel>
                <div id="bottom_buttons" class="slds-border_top slds-p-top_small slds-p-bottom_small" style="display:flex; justify-content: center;">
                    <div class="slds-button-group" role="group">
                        <button type="button" class="slds-button slds-button_neutral" onclick="handleCancelBtnOnClick(event)">Cancel</button>
                        <button id="merge-btn" type="button" class="slds-button slds-button_brand" onclick="handleMergeBtnOnClick(event)">Merge</button>
                    </div>
                </div>
            </apex:outputPanel>


            <!-- 
                Modal: All Modals are handled here and show/hide certain elements based on the "variants" attribute on elements inside of the modal.
                See the MODAL_VARIANTS global variable/enum in the script below to view modal types
            -->
            <section role="dialog" tabindex="-1" id="modal" class="slds-modal" data-slides="true">
                    <div class="slds-modal__container slds-is-relative">
                        <div class="slds-is-relative">
                            <header class="slds-modal__header">
                                <button id="modal-close-btn" type="button" class="slds-close-button slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick="handleModalCloseBtnOnClick(event)">
                                    <img src="{!URLFOR($Resource.CaseMergePremiumAssets, 'case-merge-premium-assets/img/custom-icons/icons/utility/close_white_60.png')}" alt="close" class="slds-button__icon slds-button__icon_large"/>
                                    <span class="slds-assistive-text">Close</span>
                                </button>
                                <h2 id="modal-heading" class="slds-text-heading_medium slds-hyphenate">
                                    <span data-variants="merge,remove" class="modal-heading-text slds-hide">Are you sure?</span>
                                    <span data-variants="remaster" class="modal-heading-text slds-hide">Changes will be discarded</span>
                                </h2>
                            </header>
            
                            <div class="slds-modal__content slds-p-around_medium">
                                <div data-variants="merge" class="modal-content slds-hide">
                                    <p>
                                        <!-- 
                                            The "Merge" modal message varies based on
                                                1. Unmerging is enabled for the org.
                                                2. The current user can unmerge.
                                        -->
                                        <apex:outputPanel layout="inline" rendered="{!(!unmergeEnabledInOrg)}">
                                            Are you sure you want to proceed with merging these cases? You cannot undo this process.
                                        </apex:outputPanel>
                                        <apex:outputPanel layout="inline" rendered="{!unmergeEnabledInOrg && !currentUserCanUnmerge}">
                                            Are you sure you want to proceed with merging these cases? You will need to consult a manager to undo this process.
                                        </apex:outputPanel>
                                        <apex:outputPanel layout="inline" rendered="{!unmergeEnabledInOrg && currentUserCanUnmerge}">
                                            Are you sure you want to proceed with merging these cases?
                                        </apex:outputPanel>
                                    </p>
                                </div>
                                <div data-variants="remove" class="modal-content slds-hide">
                                    <p>
                                        <span>Are you sure you want to remove this case, once removed</span>
                                        <span class="bold">  you cannot add it back.</span>
                                    </p>
                                </div>
                                <div data-variants="remaster" class="modal-content slds-hide">
                                    <p>
                                        <span>By choosing a new primary case,</span>
                                        <span class="bold"> all changes on the current primary case will be discarded.</span>
                                        <span>Do you wish to continue?</span>
                                    </p>
                                </div>
                                <div data-variants="textarea" class="modal-content slds-hide">
                                    <div class="slds-m-top_medium">
                                        <div class="slds-grid slds-gutters">
                                            <div class="slds-size_1-of-2">
                                                <div class="slds-m-horziontal_medium">
                                                    <div class="slds-text-heading_small bold">
                                                        <div class="slds-grid slds-grid_align-spread">
                                                            <div>
                                                                Primary Case <span class="field-label-filler"></span>
                                                            </div>
                                                            <div class="slds-is-relative">
                                                                <button id="text-area-tooltip-button" class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="help" aria-disabled="true" type="button">
                                                                    <svg id="text-area-tooltip-icon" class="slds-button__icon" aria-hidden="true" viewBox="0 0 24 24">
                                                                        <path d="M12 .9C5.9.9.9 5.9.9 12s5 11.1 11.1 11.1 11.1-5 11.1-11.1S18.1.9 12 .9zm0 5.6c.8 0 1.4.6 1.4 1.4s-.6 1.4-1.4 1.4-1.4-.6-1.4-1.4.6-1.4 1.4-1.4zm2.3 9.7c0 .2-.2.4-.5.4h-3.6c-.3 0-.5-.1-.5-.4v-.9c0-.3.2-.5.5-.5.2 0 .4-.2.4-.4v-1.9c0-.2-.2-.5-.4-.5-.3 0-.5-.1-.5-.4v-.9c0-.3.2-.5.5-.5h2.7c.3 0 .5.2.5.5v3.7c0 .2.2.4.4.4.3 0 .5.2.5.5v.9z"></path>
                                                                    </svg>
                                                                    <span class="slds-assistive-text">Help</span>
                                                                </button>
                                                                <div id="text-area-tooltip-content" class="slds-popover slds-popover_tooltip slds-nubbin_top-right" role="tooltip">
                                                                    <div class="slds-popover__body">
                                                                        Use this screen to edit the Primary Case <span class="field-label-filler"></span>. To copy the <span class="field-label-filler"></span> from a child case, use the clipboard button.
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="slds-m-top_small">
                                                        <table class="textarea-input-table">
                                                            <tr>
                                                                <td>
                                                                    <apex:repeat value="{!mergeFields}" var="f">
                                                                        <apex:outputPanel layout="none" rendered="{!f.isTextArea}">
                                                                            <apex:repeat value="{!mergeCases}" var="csw">
                                                                                <div class="textarea-wrapper slds-hide" data-field-name="{!f.name}" data-case-id="{!csw.oldCase.Id}">
                                                                                    <apex:inputTextArea richtext="true" value="{!csw.newCase[f.name]}" rendered="{!f.isRichText}" styleClass="rich-textarea"/>
                                                                                    <apex:inputTextArea richtext="false" value="{!csw.newCase[f.name]}" rendered="{!NOT(f.isRichText)}" styleClass="slds-textarea standard-textarea"/>
                                                                                </div>
                                                                            </apex:repeat>
                                                                        </apex:outputPanel>
                                                                    </apex:repeat>
                                                                </td>
                                                            </tr>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-size_1-of-2">
                                                <div class="slds-m-horizontal_medium">
                                                    <div class="slds-text-heading_small bold">
                                                        <span class="field-label-filler"></span> from other Case(s)
                                                    </div>
                                                    <div class="slds-box textarea-input-options slds-m-top_small slds-scrollable_y slds-is-relative">
                                                        <apex:repeat value="{!mergeFields}" var="f">
                                                            <!--
                                                                An Explanation for "outputFieldFieldName": So for an unknown reason, using csw.oldCase[f.Name] in the "text-area-text" div's outputField will cause a 
                                                                visualforce error IF the field name is for a relationship (e.g. Contact.AccountId). While we currently don't allow related fields to be edited, I covered for the scenario anyway. 
                                                                Setting the value of "f.Name" to a variable and using that variable fixes this. I've checked in the past, and both values are exactly the same, but the
                                                                apex:variable is the only one that works.
                                                            -->
                                                            <apex:variable value="{!f.Name}" var="outputFieldFieldName"/>

                                                            <div class="field-options-wrapper slds-hide" data-field-name="{!f.name}">
                                                                <apex:variable value="{!0}" var="textAreaFieldCounter"/>
                                                                <apex:repeat value="{!mergeCases}" var="csw">
                                                                    <apex:outputPanel layout="none" rendered="{!csw.oldCase[f.Name] != '' && csw.oldCase[f.Name] != NULL}">
                                                                        <div class="textarea-from-case-card">
                                                                            <div class="textarea-from-case-card-header">
                                                                                <div class="slds-grid slds-grid_align-spread">
                                                                                    <div style="margin: auto 0;">
                                                                                        <span>{!IF(csw.oldCase.Id == masterCaseId, 'Master', 'Case')}: {!csw.oldCase.CaseNumber}</span>
                                                                                    </div>
                                                                                    <button type="button" class="slds-button slds-button_icon slds-button_icon-border-filled" data-case-id="{!csw.oldCase.Id}" data-field-name="{!f.name}" onclick="handleCopyTextAreaBtnOnClick(event);" title="Copy">
                                                                                        <svg class="slds-button__icon" aria-hidden="true" viewBox="0 0 24 24">
                                                                                            <path d="M8 5.4h8c.4 0 .8-.4.8-.8V3.1c0-1.2-1-2.2-2.2-2.2H9.5c-1.2 0-2.2 1-2.2 2.2v1.5c0 .4.3.8.7.8zm12-2.6h-.8c-.2 0-.3.1-.3.3v1.5c0 1.6-1.3 3-2.9 3H8c-1.6 0-2.9-1.4-2.9-3V3.1c0-.2-.1-.3-.3-.3H4c-1.2 0-2.2 1-2.2 2.2v15.9c0 1.2 1 2.2 2.2 2.2h16c1.2 0 2.2-1 2.2-2.2V5c0-1.2-1-2.2-2.2-2.2z"></path>
                                                                                        </svg>
                                                                                    </button>
                                                                                </div>
                                                                            </div>
                                                                            <div class="textarea-from-case-card-content slds-is-relative" data-case-id="{!csw.oldCase.Id}" data-field-name="{!f.name}" data-auto-copy="true">
                                                                                <span class="text-area-text">
                                                                                    <apex:outputField value="{!csw.oldCase[outputFieldFieldName]}"/>
                                                                                </span>
                                                                                <div class="text-area-copied faded">
                                                                                    <span class="slds-icon_container">
                                                                                        <svg class="slds-icon" aria-hidden="true" viewBox="0 0 24 24">
                                                                                            <path d="M20.3.9h-12c-1 0-1.8.9-1.8 1.9v.9h11c1.1 0 1.9.8 1.9 1.8v13h.9c1 0 1.9-.9 1.9-1.9V2.8c0-1-.9-1.9-1.9-1.9zm-2.8 6.5c0-1-.8-1.9-1.8-1.9h-12c-1 0-1.9.9-1.9 1.9v13.8c0 1 .9 1.9 1.9 1.9h12c1 0 1.8-.9 1.8-1.9V7.4zm-8.3 3.2c0 .3-.2.5-.4.5H5.1c-.3 0-.5-.2-.5-.5v-.9c0-.3.2-.5.5-.5h3.7c.2 0 .4.2.4.5v.9zm3.7 7.4c0 .3-.2.5-.4.5H5.1c-.3 0-.5-.2-.5-.5v-.9c0-.3.2-.5.5-.5h7.4c.2 0 .4.2.4.5v.9zm1.9-3.7c0 .3-.2.5-.5.5H5.1c-.3 0-.5-.2-.5-.5v-.9c0-.3.2-.5.5-.5h9.2c.3 0 .5.2.5.5v.9z"></path>
                                                                                        </svg>
                                                                                    </span>
                                                                                    <span>Copied</span>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <apex:variable value="{!textAreaFieldCounter + 1}" var="textAreaFieldCounter"/>             
                                                                    </apex:outputPanel>
                                                                </apex:repeat>
                                                                <apex:outputPanel layout="block" styleClass="no-textareas-available-message" rendered="{!textAreaFieldCounter == 0}">
                                                                    No {!f.Label} Available
                                                                </apex:outputPanel>
                                                            </div>
                                                        </apex:repeat>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="slds-m-top_medium slds-grid slds-grid_align-center">
                                            <div class="slds-button_group">
                                                <button type="button" class="slds-button slds-button_neutral" onclick="handleModalCancelBtnOnClick(event)">Cancel</button>
                                                <button type="button" class="slds-button slds-button_brand" onclick="handleModalSaveTextAreaBtnOnClick(event)">Save</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
            
                            <footer class="slds-modal__footer">
                                <button data-variants="all" type="button" class="modal-footer-btn slds-button slds-button_neutral slds-hide" onclick="handleModalCancelBtnOnClick(event)">Cancel</button>
                                <button data-variants="merge" type="button" class="modal-footer-btn slds-button slds-button_brand slds-hide" onclick="handleModalMergeBtnOnClick(event)">Merge</button>
                                <button data-variants="remove" type="button" class="modal-footer-btn slds-button slds-button_brand slds-hide" onclick="handleModalRemoveBtnOnClick(event)">Remove</button>
                                <button data-variants="remaster" type="button" class="modal-footer-btn slds-button slds-button_brand slds-hide" onclick="handleModalRemasterBtnOnClick(event)">Continue</button>
                            </footer>
            
                            <!-- Spinner -->
                            <div id="modal-spinner" class="slds-spinner_container slds-hide">
                                <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                                    <span class="slds-assistive-text">Loading</span>
                                    <div class="slds-spinner__dot-a"></div>
                                    <div class="slds-spinner__dot-b"></div>
                                </div>
                            </div>
                        </div>
                    </div>
            </section>
            <div id="modal-backdrop" class="slds-backdrop"></div>

            <!-- 
                A collection of hidden divs that store values for any related fields on a referenced sObject so that they can be copied to the card
                without re-rendering the card. Re-rendering the card will lose any custom values and set the card back to read view for all fields.
            -->
            <apex:outputPanel id="hiddenRefSObjectFields" layout="block" styleClass="slds-hide">
                <apex:outputPanel rendered="{!refObjSearchResult != null}">
                    <apex:repeat value="{!refObjFieldsMap[refObjBase]}" var="field">
                        {!field.name} - {!field.isCheckbox}
                        <div class="ref-obj-field-data-container" data-field-name="{!field.name}" data-value="{!refObjSearchResult[field.relatedFieldFieldName]}" data-has-value="{!refObjSearchResult[IF(field.isReference, field.lookupRelationshipName + '.' + field.lookupSObjectNameFieldName, field.relatedFieldFieldName)] != null && refObjSearchResult[IF(field.isReference, field.lookupRelationshipName + '.' + field.lookupSObjectNameFieldName, field.relatedFieldFieldName)] != ''}">
                            <apex:outputPanel layout="none" rendered="{!NOT(field.isReference) && NOT(field.isCheckbox)}">
                                <apex:outputField value="{!refObjSearchResult[field.relatedFieldFieldName]}"/>
                            </apex:outputPanel>

                            <apex:outputPanel layout="none" rendered="{!field.isReference}">
                                <apex:outputText value="{!refObjSearchResult[field.lookupRelationshipName + '.' + field.lookupSObjectNameFieldName]}"/>
                            </apex:outputPanel>

                            <apex:outputPanel layout="none" rendered="{!field.isCheckbox}">
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        <div class="slds-checkbox">

                                            <apex:outputPanel layout="none" rendered="{!refObjSearchResult[field.relatedFieldFieldName] == true}">
                                                <input type="checkbox" name="options" id="{!masterCaseId}-{!refObjSearchResult.Id}-{!field.name}-checkbox" disabled="disabled" checked="checked" />
                                                <label class="slds-checkbox__label" for="{!masterCaseId}-{!refObjSearchResult.Id}-{!field.name}-checkbox">
                                                    <span class="slds-checkbox_faux"></span>
                                                </label>
                                            </apex:outputPanel>

                                            <!-- Note: Removing == false will break the page because it thinks oldCase's value is a string.
                                                Not sure why -->
                                            <apex:outputPanel layout="none" rendered="{!refObjSearchResult[field.relatedFieldFieldName] == false}">
                                                <input type="checkbox" name="options" id="{!masterCaseId}-{!refObjSearchResult.Id}-{!field.name}-checkbox" disabled="disabled"/>
                                                <label class="slds-checkbox__label" for="{!masterCaseId}-{!refObjSearchResult.Id}-{!field.name}-checkbox">
                                                    <span class="slds-checkbox_faux"></span>
                                                </label>
                                            </apex:outputPanel>
                                        </div>
                                    </div>
                                </div>
                            </apex:outputPanel>
                        </div>
                    </apex:repeat>
                </apex:outputPanel>
            </apex:outputPanel>
        </apex:form>
    </div>

    <script src="{!URLFOR($Resource.CaseMergePremiumAssets,'case-merge-premium-assets/script/action-overlays.js')}" type="application/javascript">//JS for disabling tabs when overlays are present</script>
    <script src="{!URLFOR($Resource.CaseMergePremiumAssets,'case-merge-premium-assets/script/xml-entities.js')}" type="application/javascript"></script>

    <!-- APEX2JS -->
    <apex:outputPanel id="apex2js">
        <script type="text/javascript">
            var APEX = {
                masterCaseId : "{!JSENCODE(masterCaseId)}",
                pageAlertJSON: "{!JSENCODE(pageAlertJSON)}",
                editabilityCheckCaseId : "{!JSENCODE(editabilityCheckCaseId)}",
                editabilityCheckCaseValue : {!editabilityCheckCaseValue},
                refObjId : "{!JSENCODE(refObjId)}",
                numCases : {!IF(mergeCases != null, mergeCases.size, 0)},
                cleanMergeEnabled : {!CLEAN_MERGE_ENABLED},
                canExceedLimit : {!EXCEED_MERGE_LIMIT_ENABLED},
                maxCases : {!CASELIMIT},
                restrictRecordType : {!RESTRICT_BY_RECORD_TYPE},
                messages : {
                    tooFewCases : "{!JSENCODE(tooFewCasesErrorMessage)}",
                    mixedRecordTypes : "{!JSENCODE(nonMatchingRecordTypesErrorMessage)}",
                    tooManyCases : "{!JSENCODE(tooManyCasesErrorMessage)}"
                }
            };
        </script>
    </apex:outputPanel>

    <!-- Objects and Polyfills -->
    <script type="text/javascript">
        // Objects
        var PageUtil = {    // Utility Functions
            forEach : function(arr, callback) {
                var doBreak;
                for(var i = 0; i < arr.length && !doBreak; i++) {
                    doBreak = callback(arr[i], i, arr.length - 1);
                }
            },

            isScreenMobileSize : function() {
                return window.innerWidth <= {!JSENCODE(mobileScreenWidth)};
            },

            isScreenMobileSmallerSize : function() {
                return window.innerWidth <= {!JSENCODE(mobileScreenWidthSmaller)};
            },

            isScreenMobileSmallestSize : function() {
                return window.innerWidth <= {!JSENCODE(mobileScreenWidthSmallest)};
            },

            isUndefined : function(obj) {
                return typeof(obj) === 'undefined';
            },

            isDefined : function(obj) {
                return !this.isUndefined(obj);
            }, 

            // Returns a function, that, as long as it continues to be invoked, will not
            // be triggered. The function will be called after it stops being called for
            // N milliseconds. If `immediate` is passed, trigger the function on the
            // leading edge, instead of the trailing.
            //
            // From David Walsh
            debounce : function(func, wait, immediate) {
                var timeout;
                return function() {
                    var context = this, args = arguments;
                    var later = function() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                    };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) func.apply(context, args);
                };
            },

            removeAllChildren : function(node) {
                while(node.lastChild) {
                    node.removeChild(node.lastChild);
                }
            },

            // if the condition is true, add a class to an element, if not, remove the class
            addClassOnCondition : function(el, className, condition) {
                if(el && className) {
                    (condition) ? el.classList.add(className) : el.classList.remove(className);
                }
            },

            // New Object Functions -- Based on http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html
            objEquals : function(obj1, obj2) {
                var obj1Props = Object.getOwnPropertyNames(obj1);
                var obj2Props = Object.getOwnPropertyNames(obj2);

                if(obj1Props.length !== obj2Props.length) {
                    return false;
                }

                var equal = true;
                PageUtil.forEach(obj1Props, function(propName) {
                    if(obj1[propName] !== obj2[propName]) {
                        equal = false;
                        return true;    // return true to end PageUtil.forEach early
                    }
                });

                return equal;
            },

            getFunctionContentFromFunctionText : function(func) {
                try {
                    var funcText = func.toString();
                    funcText = funcText.substring(funcText.search('{') + 1, funcText.length -1);
                    return funcText;
                } catch (e) {
                    return null;
                }
            }

        }

        // Prototypes and Polyfills
        Node.prototype.removeAllChildren = function() {
            PageUtil.removeAllChildren(this);
        }

        /* Element.closest() (https://developer.mozilla.org/en-US/docs/Web/API/Element/closest) */
        if (!Element.prototype.matches) {
            Element.prototype.matches = Element.prototype.msMatchesSelector || 
                                        Element.prototype.webkitMatchesSelector;
            }

            if (!Element.prototype.closest) {
            Element.prototype.closest = function(s) {
                var el = this;

                do {
                if (el.matches(s)) return el;
                el = el.parentElement || el.parentNode;
                } while (el !== null && el.nodeType === 1);
                return null;
            };
        }

        function SalesforceUX() {   // Keeps track of which experience you are in, without using UIThemeDisplayed
            var themeIsLightningBased = PageUtil.isDefined(sforce && sforce.one);

            this.IN_CONSOLE = sforce && sforce.console && sforce.console.isInConsole();
            this.IN_CLASSIC_CONSOLE = this.IN_CONSOLE && !themeIsLightningBased;
            this.IN_LIGHTNING_CONSOLE = this.IN_CONSOLE && themeIsLightningBased;
            this.IN_LIGHTNING_EXPERIENCE = !this.IN_LIGHTNING_CONSOLE && themeIsLightningBased;
            this.IN_CLASSIC = !this.IN_CONSOLE && !this.IN_LIGHTNING_EXPERIENCE;
        }
    </script>

    <!-- Handlers -->
    <script type="text/javascript">
        var PAGE_ALERT = PageAlert.newInstance("{!$Component.pg.pageAlert}", {animated: true});

        // Page Handlers
        function handlePageOnLoad(e) {
            runInitialValidation();
        }

        function handleInitialValidationOnComplete() {
            setupPage();
        }

        function handlePageOnResize(e) {
            var displayedCases = getCasesDisplayed();
            var caseCardsContainer = document.getElementById('case-cards-container');
            var scrollButtons = document.querySelectorAll('.scroll-btn');
            
            // No transitions on resize
            caseCardsContainer.classList.add('no-transition-override');
            PageUtil.forEach(scrollButtons, function(el, i , end) {
                el.classList.add('no-transition-override');
            });

            var maxPercent = (100 / getCasesDisplayed()) * getCardsEndIndex();
            if(Math.abs(pageConfig.TRANSLATE_PERCENT) > maxPercent) {
                caseCardsContainer.style.transform = 'translateX(' + ((-1 * getCardLength() * pageConfig.CASE_COUNT) + (getCardLength() * getCasesDisplayed())) + '%)';
            }

            updateAllValueWrapperHeights();
            
            if(displayedCases >= pageConfig.CASE_COUNT) {
                pageConfig.VIEW_OFFSET = 0;
            }
            else {
                if(displayedCases + pageConfig.ACTUAL_OFFSET > pageConfig.CASE_COUNT) {
                    pageConfig.VIEW_OFFSET = pageConfig.CASE_COUNT - displayedCases;
                }
                else {
                    pageConfig.VIEW_OFFSET = pageConfig.ACTUAL_OFFSET;
                }
            }
            adjustCasePositioning();

            // Bring back the transitions after a timeout.
            setTimeout(function() {
                caseCardsContainer.classList.remove('no-transition-override');
                PageUtil.forEach(scrollButtons, function(el, i , end) {
                    el.classList.remove('no-transition-override');
                });
            }, 250);

            setTextAreaModalHeights();
        }

        function handlePageOnMouseUp(e) {
            autoCopyHighlightedText(e);
        }

        function handlePageOnKeyDown(e) {
            var key = e.which || e.keyCode || 0;
            if(key === 37) {        // left arrow
                handlePreviousCaseBtnOnClick(e);
            }
            if(key === 39) {        // right arrow
                handleNextCaseBtnOnClick(e);
            }
        }

        // Setup
        function setupPage() {
            // UI
            handleAlertAfterApex();
            handleDisableMerge();

            if(APEX.numCases> 0) {
                // Setup Data
                updateSrcCaseValuePicklists();
                initSrcCaseValues();
                setupCaseInputEventListeners();
                adjustBottomButtonPadding();
                updateReferenceTabButtons();
                updateCaseNumberLinks();
                styleCalendar();
                updateLookupLinks();
                fixLookupLinks();
                updateLookupEditUI();
                updateOwnerIdLookupEditUI();
                updateMultiSelectPicklistUI();
                setTextAreaModalHeights();
                adjustCasePositioning();
                updateAllValueWrapperHeights();
            }

            hideActionOverlay();
        }

        // Case Card Navigation Buttons
        function handlePreviousCaseBtnOnClick(e) {
            scrollToPreviousCase();
        }

        function handleNextCaseBtnOnClick(e) {
            scrollToNextCase();
        }

        // Case Card Header Buttons
        function handleMasterCaseBtnOnClick(e) {
            var dirtyFlag = DIRTY;

            // If a Lookup with a select was modified (just the select)
            PageUtil.forEach(document.querySelectorAll("[id$='_mod'"), function(hi) {
                if(hi.value === "1") {
                    dirtyFlag = true;
                    return true;
                }
            });
            
            var newMasterCaseId = e.currentTarget.getAttribute("data-case-id")
            if(newMasterCaseId !== document.querySelector("[id$='h__masterCaseId']").value) {
                if(dirtyFlag) {
                    showModalVariant(MODAL_VARIANTS.REMASTER, {caseId : newMasterCaseId});
                }
                else {
                    if(SHARING_CHECKED_FOR_CASE.hasOwnProperty(newMasterCaseId)) {
                        remaster(newMasterCaseId);
                    }
                    else {
                        showActionOverlay(true);
                        checkCaseEditability(newMasterCaseId);
                    }
                }
            }
        }

        function handleRemoveCaseBtnOnClick(e) {
            showModalVariant(MODAL_VARIANTS.REMOVE, {caseId : e.currentTarget.getAttribute("data-case-id")});
        }

        // Case Card Detail
        function handleCaseNumberLinkOnClick(e) {
            if(SF_UX.IN_CONSOLE) {
                var refId = e.currentTarget.getAttribute('data-case-id');
                if(refId) {
                    consoleNavigateRecord('/' + refId);
                }
            }
        }

        function handleToggleLinkOnClick(e) {
            e.preventDefault();
            var card = e.currentTarget.closest(".case-card");
            var valueWrapper = e.currentTarget.closest(".detail-col.value-col[data-is-value-wrapper='true']");
            var details = getFieldValueDetails(valueWrapper);
            var showAllOld = valueWrapper.getAttribute("data-show-all") === "true";
            valueWrapper.setAttribute("data-show-all", !showAllOld);
            updateValueWrapperHeightForCard(card, details.fieldName);
        }

        function handleEditCustomBtnOnClick(e) {
            var valueWrapper = e.currentTarget.closest(".detail-col.value-col[data-is-value-wrapper='true']");
            var els = getFieldValueElements(valueWrapper);
            var details = getFieldValueDetails(valueWrapper);
            if(details.isTextArea) {
                showModalVariant(MODAL_VARIANTS.TEXTAREA, {caseId : details.caseId, fieldName : details.fieldName, fieldLabel : details.fieldLabel});
            }
            else {
                showEditCustom(details, els);
            }
        }

        function handleReferenceTabLinkOnClick(e) {
            if(SF_UX.IN_CONSOLE) {
                var refId = e.currentTarget.getAttribute('data-reference-id');
                if(refId) {
                    consoleNavigateRecord('/' + refId);
                }
            }
        }

        function handleEditConfirmBtnOnClick(e) {
            var valueWrapper = e.currentTarget.closest(".detail-col.value-col[data-is-value-wrapper='true']");
            var els = getFieldValueElements(valueWrapper);
            var details = getFieldValueDetails(valueWrapper);
            
            var srcAllMessagesSpan = els.srcAllMessages.querySelector("span");

            clearSrcAllErrorMessages(els);

            var newValue = els.srcAllVisibleInput.value.trim();
            var newLabel = newValue;
            if(details.isPicklist) {
                newLabel = els.srcAllVisibleInput.selectedOptions[0].label;
            }

            if(details.isReference) {
                newValue = els.srcAllHiddenReferenceInputs.id.value ?? '';  // If there is no value, set to empty String (the "--None--" option)
            }

            if(newValue) {
                var existingOpt;
                PageUtil.forEach(els.srcCasesSelect.options, function(opt) {
                    if(opt.value === newValue) {
                        existingOpt = opt;
                        return true;
                    }
                    else if(details.isReference) {  // Double check for 15 digit Ids.
                        if(opt.value.substring(0,15) === newValue.substring(0,15)) {
                            newValue = opt.value;
                            existingOpt = opt;
                            return true;
                        }
                    }
                });

                var opt;
                if(existingOpt) {   // Value Already Exists
                    opt = existingOpt;
                }
                else {  // New Value
                    opt = document.createElement("option");
                    opt.appendChild(document.createTextNode(newLabel));
                    opt.value = newValue;
                    opt.setAttribute("data-custom-value", "true");
                    els.srcCasesSelect.appendChild(opt);
                    details.caseOptionCount += 1;
                }
                opt.selected = true;
                els.hiddenInputs.srcCaseValue.value = newValue;
                hideEditCustom(details, els);
                if(details.isReference) {
                    updateRefTabLink(els.refTabLink, newValue);
                }
            }
            else {
                els.srcAllVisibleInput.closest(".slds-form-element").classList.add("slds-has-error");
                srcAllMessagesSpan.appendChild(document.createTextNode("A Value is Required"));
            }
        }

        function handleEditCancelBtnOnClick(e) {
            var valueWrapper = e.currentTarget.closest(".detail-col.value-col[data-is-value-wrapper='true']");
            var els = getFieldValueElements(valueWrapper);
            var details = getFieldValueDetails(valueWrapper);
            hideEditCustom(details, els); 
        }

        function handleEditInputOnChange(e) {
            setDirty();

            // Multi-Select picklist changes won't always provide "e". It's not needed anyway.
            if(e) {
                var valueWrapper = e.currentTarget.closest(".detail-col.value-col[data-is-value-wrapper='true']");
                var els = getFieldValueElements(valueWrapper);
                var details = getFieldValueDetails(valueWrapper);

                // Nothing below applies to Checkboxes and Multiselect Picklists. Attempting to run this code on them will cause errors for these field types.
                if(details.isCheckbox || details.isMultiPicklist) {
                    return;
                }

                if(e.currentTarget.closest(".detail-edit-src-cases")) { // Is existing case values select
                    els.hiddenInputs.srcCaseValue.value = e.currentTarget.value;
                    if(details.isReference) {
                        var value = els.srcCasesSelect.value.trim();
                        PageUtil.addClassOnCondition(els.refTab, "slds-hide", !(value));
                        PageUtil.addClassOnCondition(els.refTabLink, "slds-hide", !(value));
                        if(value) {
                            updateRefTabLink(els.refTabLink, value);
                        }

                        if(!details.isNamePointing && details.hasRelatedFields) {
                            var object = details.lookupBase;
                            getCaseCardForCaseId(document.querySelector("[id$='h__masterCaseId']").value).querySelector(".case-card-spinner").classList.remove("slds-hide");
                            REQUERIED_OBJECT = object;
                            requerySObject(object, value);
                        }
                    }
                }
            }
        }

        // Footer Buttons
        function handleCancelBtnOnClick(e) {
            navigateCancel();
        }
        
        function handleMergeBtnOnClick(e) {
            var caseId = document.querySelector("[id$='h__masterCaseId']").value;
            if(caseId) {
                showModalVariant(MODAL_VARIANTS.MERGE);
            }
        }

        // Modal Buttons
        function handleModalCancelBtnOnClick(e) {
            hideModal();
        }

        function handleModalCloseBtnOnClick(e) {
            hideModal();
        }

        // Merge Modal Buttons
        function handleModalMergeBtnOnClick(e) {
            document.getElementById("modal-close-btn").disabled = true;
            performMerge(); 
        }

        // Remove Modal Buttons
        function handleModalRemoveBtnOnClick(e) {
            document.getElementById("modal-close-btn").disabled = true;
            var caseId = document.getElementById("h__modalCaseId").value;
            removeCase(caseId);
            handleDisableMerge();
            hideModal();
        }

        // Remove Modal Buttons
        function handleModalRemasterBtnOnClick(e) {
            document.getElementById("modal-close-btn").disabled = true;
            var newMasterCaseId = document.getElementById("h__modalCaseId").value;
            if(SHARING_CHECKED_FOR_CASE.hasOwnProperty(newMasterCaseId)) {
                remaster(newMasterCaseId);
            }
            else {
                showActionOverlay(true);
                checkCaseEditability(newMasterCaseId);
            }
            hideModal();
        }

        // TextArea Modal Buttons
        function handleModalSaveTextAreaBtnOnClick(e) {
            var wrapper = document.querySelector(".textarea-wrapper:not(.slds-hide)");
            var iframe = wrapper.querySelector("iframe");
            var value = '';
            if(iframe) {   // Rich Text
                value = iframe.contentWindow.document.body.innerHTML;
            }
            else {  // Normal Text
                value = wrapper.querySelector("textarea").value;
            }

            var card = getCaseCardForCaseId(document.getElementById("h__modalCaseId").value);
            var valueWrapper = card.querySelector(".detail-col.value-col[data-is-value-wrapper='true'][data-field-name='" + document.getElementById("h__modalCaseField").value  +"']");
            var els = getFieldValueElements(valueWrapper);
            var details = getFieldValueDetails(valueWrapper);

            els.valueUpdatedTextArea.innerHTML = value;
            els.valueUpdatedTextArea.classList.remove("slds-hide");

            els.valueOutputField.classList.add("slds-hide");
            DIRTY = true;

            displayModal(false);
            updateValueWrapperHeightForCard(card, details.fieldName);
        }

        function handleModalOnKeyDown(e) {
            var key = e.which || e.keyCode || 0;

            if(e.keyCode === 27) {  // Esc key
                hideModal();
            }
        }

        function handleCopyTextAreaBtnOnClick(e) {
            var caseId = e.currentTarget.getAttribute("data-case-id");
            var fieldName = e.currentTarget.getAttribute("data-field-name");
            var textNode = document.querySelector(".textarea-from-case-card-content[data-case-id='" +  caseId + "'][data-field-name='" + fieldName + "'] span");
            if(textNode) {
                // From https://stackoverflow.com/questions/36639681/how-to-copy-text-from-a-div-to-clipboard
                // And https://stackoverflow.com/questions/43260617/selection-addrange-is-deprecated-and-will-be-removed-from-chrome
                var selection = window.getSelection();
                var range = document.createRange();
                range.selectNodeContents(textNode);
                selection.removeAllRanges();
                selection.addRange(range);
                document.execCommand("copy");
                selection.removeAllRanges();
                showCopiedText(textNode.nextElementSibling);
            }
        }

        // Action Function Completion Handlers
        function handleMergeCasesOnComplete() {
            handleAlertAfterApex();
            if(PAGE_ALERT.notification.collapsed) {
                if(SF_UX.IN_CONSOLE) {
                    consoleNavigateOnMergeSuccess('/' + APEX.masterCaseId);
                }
                else {
                    navigateOnMergeSuccess();
                }
            }
            else {
                hideModal();
            }
            hideModal();
        }

        function handleRequerySObjectOnComplete() {
            /*
                Checks the rerendered hiddenRefSObjectFields outputPanel and moves the contents
                of each output section to it's respective section on the master card.
            */
            var masterCard = getCaseCardForCaseId(document.querySelector("[id$='h__masterCaseId']").value);
            var hiddenDivContainers = document.querySelector("[id$='hiddenRefSObjectFields']").querySelectorAll("div.ref-obj-field-data-container");
            
            if(hiddenDivContainers.length > 0) {
                PageUtil.forEach(hiddenDivContainers, function(dc) {
                    var children = [];
                    PageUtil.forEach(dc.childNodes, function(child) {
                        if(child.nodeName !== 'SCRIPT') {
                            children.push(child);
                        }
                    });

                    var fieldName = dc.getAttribute("data-field-name");
                    var hasValue = dc.getAttribute("data-has-value") === "true";
                    if(fieldName) {
                        var valueWrapper = masterCard.querySelector(".detail-col.value-col[data-field-name='" + fieldName + "']");
                        var els = getFieldValueElements(valueWrapper);
                        var details = getFieldValueDetails(valueWrapper);

                        els.valueOutputField.classList.add("slds-hide");
                        els.valueOutputText.classList.add("slds-hide");

                        PageUtil.forEach(els.valueRequeried.querySelectorAll("div[data-lookup-id]"), function(el) {
                            el.classList.add("slds-hide");
                        });

                        //els.valueRequeried.removeAllChildren();
                        //els.valueRequeried.innerHTML = '';
                        var div = els.valueRequeried.querySelector("div[data-lookup-id='" + APEX.refObjId + "']")
                        if(div) {
                            div.innerHTML = "";
                            div.classList.remove("slds-hide");
                        }
                        else {
                            div = document.createElement("div");
                            div.setAttribute("data-lookup-id", APEX.refObjId);
                        }

                        PageUtil.forEach(children, function(child) {
                            child.id = '';
                            div.appendChild(child);
                        });
                        els.valueRequeried.appendChild(div);
                        els.valueRequeried.classList.remove("slds-hide");
                        updateValueWrapperHeightForCard(masterCard, fieldName);

                        if(details.isReference) {
                            PageUtil.addClassOnCondition(els.refTab, "slds-hide", !hasValue);
                            PageUtil.addClassOnCondition(els.refTabLink, "slds-hide", !hasValue);
                            if(hasValue) {
                                updateRefTabLink(els.refTabLink, dc.getAttribute("data-value"));
                            }   
                        }
                    }
                });
            }
            else {
                PageUtil.forEach(masterCard.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                    var els = getFieldValueElements(valueWrapper);
                    var details = getFieldValueDetails(valueWrapper);

                    if(details.relatedFieldBase === REQUERIED_OBJECT) {
                        els.valueOutputText.classList.add("slds-hide");
                        els.valueOutputField.classList.add("slds-hide");
                        //els.valueRequeried.removeAllChildren();
                        if(details.isCheckbox) {
                            els.valueRequeried.innerHTML = '<div class="slds-form-element">' + '<div class="slds-form-element__control">' + '<div class="slds-checkbox">' + '<input type="checkbox" name="options"  disabled="disabled"/>' + '<label class="slds-checkbox__label">' + '<span class="slds-checkbox_faux"></span>' + '</label></div></div></div>';
                        }
                        else {
                            els.valueRequeried.innerHTML = '';
                            els.valueRequeried.classList.add("slds-hide");
                            if(details.isReference) {
                                els.refTabLink.classList.add("slds-hide");
                            }
                        }
                        updateValueWrapperHeightForCard(masterCard, details.fieldName);

                    }
                });
            }
            REQUERIED_OBJECT = null;
            masterCard.querySelector(".case-card-spinner").classList.add("slds-hide");
        }

        function handleCaseEditabilityCheckOnComplete() {
            var id = APEX.editabilityCheckCaseId;
            SHARING_CHECKED_FOR_CASE[id] = true;

            PageUtil.forEach(document.querySelectorAll(".case-card[data-case-id='" + id + "'] .detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                valueWrapper.setAttribute("data-can-edit-case", APEX.editabilityCheckCaseValue);
                var els = getFieldValueElements(valueWrapper);
                var editBtnWrapper = els.editCustom.querySelector(".edit-custom-btn-wrapper");
                if(editBtnWrapper) {
                    PageUtil.addClassOnCondition(editBtnWrapper, "el-invisible", !APEX.editabilityCheckCaseValue);
                }
            });
            
            remaster(id);
            hideActionOverlay();
        }

        // Alert Handler
        function handleAlertAfterApex() {
            var pageAlertInfo;
            if(APEX.pageAlertJSON) {
                try {
                    pageAlertInfo = JSON.parse(APEX.pageAlertJSON);
                }
                catch(err) {}
            }


            if(pageAlertInfo) {
                pageAlertInfo.show = true;
                pageAlertInfo.notification = {
                    animated: true
                };
                pageAlertInfo.modal = {
                    title: (pageAlertInfo.theme === PageAlert.THEME.ERROR) ? "Error Details" : "Case Replacements",
                }
                PAGE_ALERT.update(pageAlertInfo);
                PAGE_ALERT.notification.show();
            }
            else {
                PAGE_ALERT.notification.hide();
            }           
        }

        // Clean Merge
        function handleCleanMergeCheckboxOnChange(e) {
            handleDisableMerge(false, e.currentTarget);
            if(e.currentTarget.checked) {
                updateAllPrefBoxes({
                    checked : false, 
                    disabled : true,
                    oldValueAction : "store"
                });
            }
            else {
                updateAllPrefBoxes({
                    disabled : false,
                    oldValueAction : "apply"
                });
            }
            displayObjectControlLinks(!e.currentTarget.checked);
        }

        function displayObjectControlLinks(doDisplay) {
            var controlLinks = document.getElementById("object-control-links");
            if(controlLinks) {  // object-control-links is not always rendered
                if(doDisplay) {
                    controlLinks.classList.remove("slds-hide");
                }
                else {
                    controlLinks.classList.add("slds-hide");
                }
            }
        }

        // Options
        function handleSelectAllLinkOnClick(e) {
            var cleanMergeCheckbox = document.getElementById("{!$Component.pg.frm.cleanMrgBox}");
            if(cleanMergeCheckbox == null || (cleanMergeCheckbox != null && !cleanMergeCheckbox.checked)) {
                updateAllPrefBoxes({
                checked : true
                });
            }

        }

        function handleUnselectAllLinkOnClick(e) {
            var cleanMergeCheckbox = document.getElementById("{!$Component.pg.frm.cleanMrgBox}");
            if(cleanMergeCheckbox == null || (cleanMergeCheckbox != null && !cleanMergeCheckbox.checked)) {
                updateAllPrefBoxes({
                    checked : false
                });
            }
        }

        /*
            Options
                checked - sets the value of all "pref-box" checkboxes to checked (true) or unchecked (false)
                disabled - if true, disables all "pref-box" checkboxes.
                oldValueAction
                    "store" - sets a data attribute, "data-old-value" to keep track of a prior value for this "pref-box" checkbox
                    "apply" - takes the value from "data-old-value" and checks the "pref-box" checkbox is the value was true or unchecks it if the the value was false.
        */
        function updateAllPrefBoxes(opts) {
            var prefBoxes = document.querySelectorAll(".pref-box");
            for(var i = 0; i < prefBoxes.length; i++) {
                var prefBox = prefBoxes[i];
                if(opts.hasOwnProperty("checked")) {
                    if(opts.hasOwnProperty("oldValueAction") && opts.oldValueAction === 'store') {
                        prefBox.setAttribute("data-old-value", prefBox.checked);
                    }
                    prefBox.checked = opts.checked;
                    updatePrefBoxValue(prefBox);
                }
                else if(opts.hasOwnProperty("oldValueAction") && opts.oldValueAction === 'apply') {
                    prefBox.checked = (prefBox.getAttribute("data-old-value") === "true");
                    updatePrefBoxValue(prefBox);
                }
                
                if(opts.hasOwnProperty("disabled")) {
                    prefBox.disabled = opts.disabled;
                }


            }
        }

        function handlePrefBoxOnChange(e) {
            updatePrefBoxValue(e.currentTarget);
        }

        function updatePrefBoxValue(prefBox) {
            document.getElementById(prefBox.getAttribute("data-hidden-id")).value = prefBox.checked;
        }
        
    </script>

    <!-- Helpers -->
    <script type="text/javascript">

        function handleDisableMerge(preventAlerts, cleanMergeCheckbox) {
            if(!(preventAlerts)) {
                preventAlerts = false;
            }

            if(!(cleanMergeCheckbox)) {
                cleanMergeCheckbox = document.getElementById("{!$Component.pg.frm.cleanMrgBox}");
            }

            var exceededLimit = ((APEX.numCases - REMOVED_CASES) > APEX.maxCases) && !(APEX.cleanMergeEnabled && cleanMergeCheckbox.checked && APEX.canExceedLimit);
            var mixedRecordTypes = APEX.restrictRecordType && getRecordTypeSet().length > 1;
            var underMinCases = (APEX.numCases - REMOVED_CASES < 2);

            if(!preventAlerts) {
                if(underMinCases) {
                    PAGE_ALERT.update({
                        theme: PageAlert.THEME.ERROR,
                        message: APEX.messages.tooFewCases,
                        modal: {
                            title: "Error Details"
                        }
                    });
                    PAGE_ALERT.notification.show();
                }
                else if(mixedRecordTypes) {
                    PAGE_ALERT.update({
                        theme: PageAlert.THEME.ERROR,
                        message: APEX.messages.mixedRecordTypes,
                        modal: {
                            title: "Error Details"
                        }
                    });
                    PAGE_ALERT.notification.show();
                }
                else if(exceededLimit) {
                    PAGE_ALERT.update({
                        theme: PageAlert.THEME.ERROR,
                        message: APEX.messages.tooManyCases,
                        modal: {
                            title: "Error Details"
                        }
                    });
                    PAGE_ALERT.notification.show();
                }
            }

            /*
                Disable the Merge Button if:
                    1. If the "Enable Record Type Restriction" setting is enabled and there are two or more record types among the cases remaining.
                    2. If the # of Cases exceeds the "Case Merge Limit" and "Clean Merge" is not checked.
                    3. If the # of Cases is less than 2.
            */
            document.getElementById("merge-btn").disabled = mixedRecordTypes || exceededLimit || underMinCases;

            if(((PAGE_ALERT.notification.message === APEX.messages.tooManyCases && !exceededLimit) || (PAGE_ALERT.notification.message === APEX.messages.mixedRecordTypes && !mixedRecordTypes))) {
                PAGE_ALERT.notification.hide();
            }
        }

        function getRecordTypeSet() {
            var recordTypes = [];
            PageUtil.forEach(document.querySelectorAll(".case-card[data-removed='false']"), function(card) {
                var recordTypeId = card.getAttribute("data-record-type-id");
                if(recordTypes.indexOf(recordTypeId) === -1) {
                    recordTypes.push(recordTypeId);
                }
            });
            return recordTypes;
        }

        function setupCaseInputEventListeners() {
            PageUtil.forEach(document.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                var details = getFieldValueDetails(valueWrapper);
                if(details.canEditField) {
                    var els = getFieldValueElements(valueWrapper);
                    if(!details.isPicklist && !details.isTextArea && !details.isCheckbox && !details.isMultiPicklist) {
                        els.srcAllVisibleInput.addEventListener("change", handleEditInputOnChange);
                    }
                }
            });
        }

        function updateSrcCaseValuePicklists() {
            /*
                Sets the SrcCaseValue picklists to the correct value on page load.
                For some reason, show the wrong value initially.
            */
            PageUtil.forEach(document.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                var details = getFieldValueDetails(valueWrapper);
                PageUtil.forEach(valueWrapper.querySelectorAll(".detail-edit-src-cases select"), function(picklist) {
                    picklist.value = details.originalValue
                });
            });
        }

        // Source Case Values (Picklists for Values with Existing Cases)
        function initSrcCaseValues() {
            /*
                Creates the first mapping of all original values on all cases. Since this pulls directly from the initial picklists, 
                it will deal with. Labels with different values from their Values
            */
            SRC_CASE_VALUES = {};
            var card = document.querySelector(".case-card");
            PageUtil.forEach(card.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                var fieldName = valueWrapper.getAttribute("data-field-name");
                var opts = [];
                PageUtil.forEach(valueWrapper.querySelectorAll(".detail-edit-src-cases option"), function(opt) {
                    opts.push({
                        value : opt.value,
                        label : opt.label
                    });
                });
                SRC_CASE_VALUES[fieldName] = opts;
            });
        }
        
        function resetSrcCaseValues() {
            /*
                Updates the mapping of all existing case values when a case is removed  for all cards.
            */
            var NEW_SRC_CASE_VALUES = {};
            PageUtil.forEach(document.querySelectorAll(".case-card[data-removed='false']"), function(card) {
                PageUtil.forEach(card.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                    var details = getFieldValueDetails(valueWrapper);
                    var fieldName = valueWrapper.getAttribute("data-field-name");

                    if(NEW_SRC_CASE_VALUES.hasOwnProperty(fieldName)) {
                        if(NEW_SRC_CASE_VALUES[fieldName].indexOf(details.originalValue) === -1) {
                            NEW_SRC_CASE_VALUES[fieldName].push(details.originalValue);
                        }
                    }
                    else {
                        NEW_SRC_CASE_VALUES[fieldName] = [details.originalValue];
                    }
                });
            });

            for(var fieldName in NEW_SRC_CASE_VALUES) {
                var newFieldOpts = [];
                var newFieldValues = NEW_SRC_CASE_VALUES[fieldName];
                var oldFieldOpts = SRC_CASE_VALUES[fieldName];
                PageUtil.forEach(oldFieldOpts, function(opt) {
                    var value = opt.value;
                    if(newFieldValues.indexOf(value) > -1) {
                        newFieldOpts.push(opt);
                    }
                });
                SRC_CASE_VALUES[fieldName] = newFieldOpts;
            }
        }

        function resetSrcCasesSelectsForCard(card) {
            /*
                Updates the mapping of all existing case values when a case is removed  for all cards.
            */
            var isMaster = document.querySelector("[id$='h__masterCaseId']").value === card.getAttribute("data-case-id");
            for(var fieldName in SRC_CASE_VALUES) {           
                var srcCasesSelects = card.querySelectorAll(".src-cases-select[data-field-name='" + fieldName + "']");
                if(srcCasesSelects.length > 0) {
                    var opts = SRC_CASE_VALUES[fieldName].slice(0);
                    PageUtil.forEach(srcCasesSelects, function(srcCasesSelect) {
                        if(isMaster) {
                            PageUtil.forEach(srcCasesSelect.querySelectorAll("option[data-custom-value='true']"), function(opt) {
                                opts.push({label : opt.label, value : opt.value, custom : true});
                            });
                        }
                        var selectedOption = srcCasesSelect.selectedOptions[0];
                        var currentValue = (selectedOption) ? (selectedOption.value) : null;
                        //srcCasesSelect.removeAllChildren();
                        srcCasesSelect.innerHTML = '';
                        var didSelectOption = false;
                        PageUtil.forEach(opts, function(opt) {
                            var o = document.createElement('option');
                            o.appendChild(document.createTextNode(opt.label));
                            o.value = opt.value;
                            o.selected = currentValue === o.value;
                            didSelectOption = didSelectOption || o.selected;
                            if(opt.custom) {
                                o.setAttribute("data-custom-value", "true");
                            }
                            srcCasesSelect.appendChild(o);
                        });

                        // If no option was selected, choose the original value.
                        if(!didSelectOption) {
                            PageUtil.forEach(srcCasesSelect.options, function(opt) {
                                if(opt.value === srcCasesSelect.getAttribute("data-original-value")) {
                                    opt.selected = true;
                                    return true;    // return true to end PageUtil.forEach early
                                }
                            });
                        }
                    });
                }
            }
        }

        // Field Hieght Adjustment
        function updateValueWrapperHeightForCard(card, fieldName) {
            setFieldCutoffForCard(card, fieldName);
            updateToggleLinkText(card, fieldName);
            equalizeHeightsForField(fieldName);
        }

        function updateAllValueWrapperHeights() {
            PageUtil.forEach(document.querySelector('.case-card').querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                var details = getFieldValueDetails(valueWrapper);
                PageUtil.forEach(document.querySelectorAll(".case-card"), function(card) {
                    setFieldCutoffForCard(card, details.fieldName);
                    updateToggleLinkText(card, details.fieldName);
                });
                equalizeHeightsForField(details.fieldName);
            });
        }

        /*
            When hovering over a reference link, it usually shows some details about the record.
            If the same record appears multiple times on the same page, it always positions
            this data at the first link. If the link isn't displaying, it shows up at (0,0).

            This happens because it bases the position off of the id attribute on the link element. To
            avoid this, each link is given a unique id.
        */
        function fixLookupLinks() {
            var counter = 1;
            PageUtil.forEach(document.querySelectorAll(".case-card"), function(card) {
                PageUtil.forEach(card.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                    var details = getFieldValueDetails(valueWrapper);
                    if(details.isReference) {
                        var elements = getFieldValueElements(valueWrapper);
                        var links = elements.valueOutputField.querySelectorAll("a");
                        PageUtil.forEach(links, function(link) {
                            var oldLinkId = link.id;
                            var newLinkId = link.id + "-" + counter;
                            if(link.closest(".outputField").getAttribute("data-for-console") === "true") {
                                newLinkId += "-console";
                            }
                            link.id = newLinkId;

                            if(link.onblur) {
                                link.setAttribute("onblur", PageUtil.getFunctionContentFromFunctionText(link.onblur).replace(oldLinkId, newLinkId));
                            }
                            if(link.onfocus) {
                                link.setAttribute("onfocus", PageUtil.getFunctionContentFromFunctionText(link.onfocus).replace(oldLinkId, newLinkId));
                            }
                            if(link.onmouseover) {
                                link.setAttribute("onmouseover", PageUtil.getFunctionContentFromFunctionText(link.onmouseover).replace(oldLinkId, newLinkId));
                            }
                            if(link.onmouseout) {
                                link.setAttribute("onmouseout", PageUtil.getFunctionContentFromFunctionText(link.onmouseout).replace(oldLinkId, newLinkId));
                            }
                        });
                    }
                });
                counter++;
            });
        }


        // DOM Adjustments when initially loading the page and when cards rerender.

        // Case Card Header
        function updateRemoveButtonsUI() {
            PageUtil.forEach(document.querySelectorAll(".remove-case-btn"), function(btn) {
                (pageConfig.CASE_COUNT > 2) ? btn.classList.remove("slds-hide") : btn.classList.add("slds-hide");
            });
        }

        // Case Card Details
        function updateCaseNumberLinks() {
            PageUtil.forEach(document.querySelectorAll('.case-number-link'), function(el) {
                if((SF_UX.IN_CONSOLE && el.getAttribute("data-for-console") === "true") || (!SF_UX.IN_CONSOLE && el.getAttribute("data-for-console") === "false")) {
                    el.classList.remove("slds-hide");
                }
            });
        }

        function updateReferenceTabButtons() {
            PageUtil.forEach(document.querySelectorAll('.reference-tab-link'), function(el) {
                el.classList.add("slds-hide");
            });


            var selector = ".reference-tab-link[data-for-console='" + (SF_UX.IN_CONSOLE) + "']";
            PageUtil.forEach(document.querySelectorAll(selector), function(el) {
                if(el.getAttribute("data-reference-id")) {
                    el.classList.remove("slds-hide");
                }
            });
        }

        function updateLookupLinks() {
            /*
                Shows which lookup link is used for child case cards. One link is updated for console use.
            */
            PageUtil.forEach(document.querySelectorAll(".value-outputField[data-is-reference='true']"), function(outputField) {
                var linkWrapper = outputField.querySelector("span[data-for-console='false']");
                var consoleLinkWrapper = outputField.querySelector("span[data-for-console='true']");

                if(linkWrapper) {
                    var link = linkWrapper.querySelector("a");
                    PageUtil.addClassOnCondition(linkWrapper, "slds-hide", SF_UX.IN_CONSOLE);
                    if(link) {
                        link.setAttribute("target", "_blank");
                    }
                }

                if(consoleLinkWrapper) {
                    var lookupId = consoleLinkWrapper.getAttribute("data-lookup-id");
                    if(lookupId) {
                        var consoleLink = consoleLinkWrapper.querySelector("a");
                        if(consoleLink) {
                            consoleLink.onclick = function(e) {
                                consoleNavigateRecord('/' + lookupId);
                            };
                            consoleLink.href = "javascript:void(0)";
                        }
                    }

                    PageUtil.addClassOnCondition(consoleLinkWrapper, "slds-hide", !SF_UX.IN_CONSOLE);
                }
            });
        }

        function updateLookupEditUI() {
            /*
                Updates the lookupInput buttons to be a SLDS Magnifying Glass Icon
            */
            PageUtil.forEach(document.querySelectorAll(".lookupInput a"), function(link) {
                var img = link.firstElementChild;

                var sldsIconContainer = document.createElement("span");
                sldsIconContainer.classList.add("slds-icon_container");

                var iconSVG = document.createElementNS("http://www.w3.org/2000/svg","svg");
                iconSVG.classList.add("slds-icon-text-light");
                iconSVG.setAttribute("viewBox", "0 0 24 24");
                iconSVG.style.height = "20px";
                iconSVG.style.width = "20px";

                var iconPath = document.createElementNS("http://www.w3.org/2000/svg","path");
                iconPath.setAttribute("d", "M22.9 20.9l-6.2-6.1c1.3-1.8 1.9-4 1.6-6.4-.6-3.9-3.8-7.1-7.8-7.4C5 .4.4 5 1 10.5c.3 4 3.5 7.3 7.4 7.8 2.4.3 4.6-.3 6.4-1.5l6.1 6.1c.3.3.7.3 1 0l.9-1c.3-.3.3-.7.1-1zM3.7 9.6c0-3.2 2.7-5.9 5.9-5.9 3.3 0 6 2.7 6 5.9 0 3.3-2.7 6-6 6-3.2 0-5.9-2.6-5.9-6z");
                
                iconSVG.appendChild(iconPath);
                sldsIconContainer.appendChild(iconSVG);
                
                link.removeChild(img);
                link.appendChild(sldsIconContainer);
            });
        }

        function updateOwnerIdLookupEditUI() {
            /*
                Wraps the User/Queue Picklists in a slds-select_container
            */
            PageUtil.forEach(document.querySelectorAll(".case-input div[data-field-name='OwnerId']"), function(div) {
                var typeSelect = div.querySelector("select");
                var childAfterSelect = typeSelect.nextElementSibling;
                var sldsSelectContainer = document.createElement("div");
                sldsSelectContainer.classList.add("slds-select_container");
                sldsSelectContainer.appendChild(typeSelect);
                div.insertBefore(sldsSelectContainer, childAfterSelect);
            });
        }

        function updateMultiSelectPicklistUI() {
            PageUtil.forEach(document.querySelectorAll(".multiSelectPicklistTable"), function(table) {
                var cells = table.querySelectorAll(".multiSelectPicklistRow td");
                var available = cells[0];
                var buttons = cells[1];
                var selected = cells[2];

                PageUtil.forEach(buttons.querySelectorAll("a"), function(btn) {
                    btn.className = "";
                    btn.classList.add("slds-button");
                    btn.classList.add("slds-button_icon");
                    btn.classList.add("slds-button_icon-container");
                    btn.style.width = "2rem";
                    btn.style.height = "2rem";
                    btn.style.paddingTop = ".5rem";
                    btn.style.paddingBottom = ".5rem";
                    var img = btn.querySelector("img");
                    if(img) {
                        btn.removeChild(img);
                    }
                    
                    var iconSVG = document.createElementNS("http://www.w3.org/2000/svg","svg");
                    iconSVG.setAttribute("viewBox", "0 0 24 24");
                    iconSVG.style.fill = "rgb(86, 105, 140)";
                    iconSVG.style.width = "1rem";
                    iconSVG.style.height = "1rem";

                    var iconPath = document.createElementNS("http://www.w3.org/2000/svg","path");
                    // Determine if the left or right arrow button using nextElementSibling. The arrow facing left does not have a next element sibling
                    iconPath.setAttribute("d", (btn.nextElementSibling) ? "M6.5 20.2V3.8c0-.4.6-.8 1-.4l9.8 8c.3.3.3.9 0 1.2l-9.8 8c-.4.4-1 .1-1-.4z" : "M17.5 3.8v16.4c0 .4-.6.8-1 .4l-9.8-8c-.3-.3-.3-.9 0-1.2l9.8-8c.4-.4 1-.1 1 .4z");
                    
                    // Remove a break element.
                    if(btn.nextElementSibling && btn.nextElementSibling.tagName === "BR") {
                        btn.parentElement.removeChild(btn.nextElementSibling);
                    }

                    iconSVG.appendChild(iconPath);
                    btn.appendChild(iconSVG);
                });
                
            });
        }


        function setCaseUIAsChild(caseId) {
            /*
                Updates the Case Card to be a child case.
                This:
                    - Sets the current view to detail-read on all fields
                    - Contacts the "Master Case" button and switches to text to "Set as Master"
                    - Displays the Remove Case Button if there are three or more cases remaining
            */
            collapseMasterCaseBtn(getMasterCaseBtnForCaseId(caseId));
            expandRemoveCaseBtn(getRemoveCaseBtnForCaseId(caseId));
            getCaseCardForCaseId(caseId).setAttribute("data-master", false);

            var caseCard = getCaseCardForCaseId(caseId);
            caseCard.setAttribute("data-master", false);
            PageUtil.forEach(caseCard.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                var els = getFieldValueElements(valueWrapper);
                var details = getFieldValueDetails(valueWrapper);
                showReadOnlyChild(els, details);

                // Reset Exiting Case Dropdown to Original Value
                if(els.srcCasesSelect && details.canEdit) {
                    els.srcCasesSelect.value = details.originalValue;
                }

                // Clear Text Areas
                if(details.isTextArea) {
                    var textareaWrapper = document.querySelector(".textarea-wrapper[data-case-id='" + details.caseId + "'][data-field-name='" + details.fieldName + "']");
                    if(textareaWrapper.querySelector("iframe")) {
                        textareaWrapper.querySelector("iframe").contentWindow.document.body.innerHTML = els.valueOutputField.innerHTML;
                    }
                    else {
                        textareaWrapper.querySelector("textarea").value = els.valueOutputField.innerText;
                    }
                }
            });
        }

        function setCaseUIAsMaster(caseId) {
            /*
                Updates the Case Card to be a child case.
                This:
                    - Sets the current view to detail-edit-src-cases on all fields without type "textarea".
                        - Textarea fields keep detail-read
                    - Expands the "Set as Master" button and switches to text to "Master Case"
                    - Hides the Remove Case Button
            */
            expandMasterCaseBtn(getMasterCaseBtnForCaseId(caseId));
            collapseRemoveCaseBtn(getRemoveCaseBtnForCaseId(caseId));
            
            var caseCard = getCaseCardForCaseId(caseId);
            caseCard.setAttribute("data-master", true);

            PageUtil.forEach(caseCard.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true']"), function(valueWrapper) {
                showEditSrcCases(getFieldValueDetails(valueWrapper), getFieldValueElements(valueWrapper));
            });
        }

        function collapseMasterCaseBtn(btn) {
            btn.classList.remove("expanded");
            btn.querySelector("span").textContent = "Set as Primary";
        }

        function expandMasterCaseBtn(btn) {
            btn.classList.add("expanded");
            btn.querySelector("span").textContent = "Primary Case";
        }

        function collapseRemoveCaseBtn(btn) {
            btn.classList.remove("expanded");
        }

        function expandRemoveCaseBtn(btn) {
            btn.classList.add("expanded");
        }

        function getCaseCardForCaseId(caseId) {
            return getElementForCaseId(".case-card", caseId);
        }

        function getMasterCaseBtnForCaseId(caseId) {
            return getElementForCaseId(".primary-case-btn", caseId);
        }

        function getRemoveCaseBtnForCaseId(caseId) {
            return getElementForCaseId(".remove-case-btn", caseId);
        }

        function getElementForCaseId(selector, caseId) {
            return document.querySelector(selector + "[data-case-id='" + caseId + "']");
        }

        function getFieldValueDetails(valueWrapper) {
            /*
                Combines all of the data-attributes on the valueWrapper into one Javascript object.
            */
            var options = valueWrapper.querySelector(".detail-edit-src-cases select");
            var fieldType = valueWrapper.getAttribute("data-field-type").toLowerCase();
            return {
                canRead : valueWrapper.getAttribute("data-can-read") === "true",
                canEditField : valueWrapper.getAttribute("data-can-edit-field") === "true",
                canEdit : valueWrapper.getAttribute("data-can-edit-field") === "true" && valueWrapper.getAttribute("data-can-edit-case") === "true",
                caseId : valueWrapper.getAttribute("data-case-id"),
                fieldLabel : valueWrapper.getAttribute("data-field-label"),
                fieldName : valueWrapper.getAttribute("data-field-name"),
                fieldType : fieldType,
                
                isReference : fieldType === 'reference',
                isPicklist : fieldType === 'picklist',
                isTextArea : fieldType === 'textarea',
                isCheckbox : fieldType === 'boolean',
                isMultiPicklist : fieldType === 'multipicklist',
                isNamePointing : valueWrapper.getAttribute("data-is-name-pointing") === "true",
                
                originalValue : getOriginalValue(valueWrapper, fieldType),
                originalReferenceLabel : valueWrapper.getAttribute("data-original-reference-label"),

                caseOptionCount : (options) ? options.length : 0,
                hasRelatedFields : (fieldType === 'reference' && parseInt(valueWrapper.getAttribute("data-ref-obj-related-field-count")) > 0),
                lookupBase : valueWrapper.getAttribute("data-lookup-base"),
                relatedFieldBase : valueWrapper.getAttribute("data-related-field-base"),
            };
        }

        function getOriginalValue(valueWrapper, fieldType) {
            if(fieldType === 'date' || fieldType === 'datetime') {
                return valueWrapper.querySelector("[id$=h__originalValue_Date]")?.value;
            }
            
            if(fieldType === 'time') {
                return valueWrapper.querySelector("[id$=h__originalValue_Time]")?.value;
            }

            return valueWrapper.getAttribute("data-original-value");
        }

        function getFieldValueElements(valueWrapper) {
            /*
                Combines all of the elements and child elements on the valueWrapper into one Javascript object.
            */
            var detailRead = valueWrapper.querySelector(".detail-read");
            var detailEditSrcCases = valueWrapper.querySelector(".detail-edit-src-cases");
            var detailEditSrcAll = valueWrapper.querySelector(".detail-edit-src-all");
            var fieldIcons = valueWrapper.querySelector('.field-icons');
            return {
                valueWrapper : valueWrapper,

                valueWrapperContent : valueWrapper.querySelector(".value-wrapper-content"),

                hiddenInputs : {
                    srcCaseValue : detailEditSrcCases.querySelector("input[id$='h__srcCasesValue'], input[id$='h__srcCasesValue_Date'], input[id$='h__srcCasesValue_Time']"),
                },

                detailRead : detailRead,
                valueOutputField : detailRead.querySelector(".value-outputField"),
                valueOutputText : detailRead.querySelector(".value-outputText"),
                valueRequeried : detailRead.querySelector(".value-requeried"),
                valueUpdatedTextArea : detailRead.querySelector(".value-updated-textarea"),

                detailEditSrcCases : detailEditSrcCases,
                srcCasesSelect : detailEditSrcCases.querySelector("select"),
                editCheckbox : detailEditSrcCases.querySelector(".edit-checkbox"),

                detailEditSrcAll : detailEditSrcAll,
                srcAllVisibleInput : getValueWrapperVisibleInput(detailEditSrcAll),
                srcAllLastRefValue : detailEditSrcAll.querySelector("input.last-reference-field-value[type='hidden']"),

                srcAllHiddenReferenceInputs : {
                    id : detailEditSrcAll.querySelector("[id$='_lkid']"),
                    label :detailEditSrcAll.querySelector("[id$='_lkold']"),
                    objIdentifier : detailEditSrcAll.querySelector("[id$='_lktp']"),
                    modified : detailEditSrcAll.querySelector("[id$='_mod']")
                },

                srcAllMessages : detailEditSrcAll.querySelector(".case-messages"),

                toggleLink : valueWrapper.querySelector(".toggle-link"),

                fieldIcons : fieldIcons,
                editCustom : fieldIcons.querySelector(".edit-custom"),
                editConfirm : fieldIcons.querySelector(".edit-confirm"),
                refTab : fieldIcons.querySelector(".ref-tab"),
                refTabLink : fieldIcons.querySelector(".reference-tab-link[data-for-console='" + SF_UX.IN_CONSOLE +  "']"),
                editCancel : fieldIcons.querySelector(".edit-cancel"),               
            };
        }

        function getValueWrapperVisibleInput(detailEditSrcAll) {
            var visibleInput;
            PageUtil.forEach(detailEditSrcAll.querySelectorAll("input, select"), function(input) {
                if(input.type !== "hidden" && !input.id.endsWith("_mlktp")) {
                    // No hidden inputs
                    // Ignore selects for multi-object lookups (id ends with _mlktp)
                    visibleInput = input;
                    return true;
                }
            });
            return visibleInput;
        }

        function showEditCustom(details, els) {
            /*
                Updates the view for a field to add your own custom field
            */
            els.detailRead.classList.add("slds-hide");
            els.detailEditSrcCases.classList.add("slds-hide");
            els.editCustom.classList.add("slds-hide");
            els.refTab.classList.add("slds-hide");

            els.detailEditSrcAll.classList.remove("slds-hide");
            els.editConfirm.classList.remove("slds-hide");
            els.editCancel.classList.remove("slds-hide");
            els.valueWrapper.setAttribute("data-state", "edit-custom");

            setCustomCaseInputValue(els, details, getSrcCaseValue(els, details));
            updateValueWrapperHeightForCard(els.valueWrapper.closest(".case-card"), details.fieldName)
        }

        function getSrcCaseValue(els, details) {
            if(details.caseOptionCount > 1) {
                var option = els.srcCasesSelect.selectedOptions[0];
                if(details.isReference) {
                    return {
                        label : ((option.value) ? option.label : ""),
                        value : option.value
                    };
                }
                else {
                    return option.value;
                }
            }
            else {
                if(details.isReference) {
                    return {
                        label : details.originalReferenceLabel,
                        value : details.originalValue
                    };
                }
                else {
                    return details.originalValue;
                }
            }
        }

        function getCustomCaseValue(els, details) {
            if(details.isReference) {
                return els.srcAllHiddenReferenceInputs.id.value;
            }
            else {
                return els.srcAllVisibleInput.value;
            }
        }

        function hideEditCustom(details, els) {
            /*
                Updates the view for a field to use an existing case value if the field is editable.
            */
            PageUtil.addClassOnCondition(els.detailEditSrcCases, "slds-hide", !(details.canEdit && (details.caseOptionCount > 1 || details.isCheckbox)));
            PageUtil.addClassOnCondition(els.detailRead, "slds-hide", details.canEdit && (details.caseOptionCount > 1 || details.isCheckbox));

            els.refTab.classList.remove("slds-hide");
            els.editCustom.classList.remove("slds-hide");

            els.detailEditSrcAll.classList.add("slds-hide");
            els.editConfirm.classList.remove("slds-hide");
            els.editConfirm.classList.add("slds-hide");
            els.editCancel.classList.add("slds-hide");

            // Clear certain hidden inputs for reference/lookup fields
            if(details.isReference) {
                if(details.canEdit) {
                    els.srcAllLastRefValue.value = "";
                }

                els.valueOutputField.classList.add("slds-hide");
                els.valueOutputText.classList.remove("slds-hide");

                var lookupBase = details.lookupBase;
                var masterCard = getCaseCardForCaseId(document.querySelector("[id$='h__masterCaseId']").value);
            
                var srcCaseValue = getSrcCaseValue(els, details).value;
                if(srcCaseValue === details.originalValue) {
                    PageUtil.forEach(masterCard.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true'][data-related-field-base='" + lookupBase + "']"), function(valueWrapper) {
                        var elsI = getFieldValueElements(valueWrapper);
                        var detailsI = getFieldValueDetails(valueWrapper);
                        elsI.valueRequeried.classList.add("slds-hide");
                        PageUtil.addClassOnCondition(elsI.valueOutputText, "slds-hide", !detailsI.isReference);
                        PageUtil.addClassOnCondition(elsI.valueOutputField, "slds-hide", detailsI.isReference);

                        if(detailsI.isReference) {
                            PageUtil.addClassOnCondition(elsI.refTab, "slds-hide", !(detailsI.originalValue));
                            PageUtil.addClassOnCondition(elsI.refTabLink, "slds-hide", !(detailsI.originalValue));
                            if(detailsI.originalValue) {
                                updateRefTabLink(elsI.refTabLink, detailsI.originalValue);
                            }
                        }
                    });
                }
                else {
                    var object = details.lookupBase;
                    REQUERIED_OBJECT = object;
                    masterCard.querySelector(".case-card-spinner").classList.remove("slds-hide");
                    requerySObject(object, srcCaseValue);
                }

                els.valueWrapper.setAttribute("data-state", "initial");

                // Reset Tab Link
                PageUtil.addClassOnCondition(els.refTab, "slds-hide", !(details.originalValue));
                PageUtil.addClassOnCondition(els.refTabLink, "slds-hide", !(details.originalValue));
                if(details.originalValue) {
                    updateRefTabLink(els.refTabLink, details.originalValue);
                }
            }

            if(details.isMultiPicklist) {
                // Simulate a double click event so the Visualforce resets the Multiselect Picklists.
                els.valueWrapper.querySelector(".multiSelectPicklistTable select[id$='_selected']")?.dispatchEvent(new MouseEvent('dblclick'));
            }

            //resetCustomValueInputs(els, details);
            clearSrcAllErrorMessages(els);
            updateValueWrapperHeightForCard(els.valueWrapper.closest('.case-card'), details.fieldName);
        }

        function resetCustomValueInputs(els, details) {
            if(details.canEdit) {
                var value = details.originalValue;
                if(details.isReference) {
                    value = {
                        value : details.originalValue,
                        label : details.originalReferenceLabel
                    };
                    els.srcAllHiddenReferenceInputs.modified.value = 0;
                }
                setCustomCaseInputValue(els, details, value);
            }
        }

        function showEditSrcCases(details, els) {
            hideEditCustom(details, els);
        }

        function showReadOnlyChild(els, details) {
            /*
                Switches the view to "detail-read" and hides all field icons.
                Used when a case becomes a child case.
            */
            els.detailRead.classList.remove("slds-hide");

            els.detailEditSrcCases.classList.add("slds-hide");
            els.refTab.classList.add("slds-hide");
            els.editCustom.classList.add("slds-hide");
            els.detailEditSrcAll.classList.add("slds-hide");
            els.editConfirm.classList.add("slds-hide");
            els.editCancel.classList.add("slds-hide"); 

            els.valueRequeried.classList.add("slds-hide");
            els.valueUpdatedTextArea.classList.add("slds-hide");
            els.valueOutputText.classList.add("slds-hide");
            els.valueOutputField.classList.remove("slds-hide");
            els.valueWrapper.setAttribute("data-state", "initial");

            if(details.isCheckbox && details.canEdit) {
                els.editCheckbox.checked = details.originalValue === "true";
            }

            //resetCustomValueInputs(els, details);
            clearSrcAllErrorMessages(els);
            updateValueWrapperHeightForCard(els.valueWrapper.closest(".case-card"), details.fieldName);
        }

        function setCustomCaseInputValue(els, details, value) {
            if(els.srcAllVisibleInput) {
                if(details.isReference) {   // Assumes value is an object
                    els.srcAllHiddenReferenceInputs.id.value = value.value;
                    els.srcAllHiddenReferenceInputs.label.value = value.label;

                    
                    var sObjectKeyPrefix = value.value.substring(0,3);
                    var namePointingReferenceSelect = els.detailEditSrcAll.querySelector("select[id$='_mlktp']");
                    if(details.isNamePointing && namePointingReferenceSelect) {
                        var namePointingReferenceInput = els.detailEditSrcAll.querySelector("input:not([type='hidden'])");
                        namePointingReferenceInput.value = value.label;

                        var valueOpt = null;
                        var queueOpt = null;
                        PageUtil.forEach(namePointingReferenceSelect.querySelectorAll("option"), function(opt) {
                            if(opt.value === sObjectKeyPrefix) {
                                valueOpt = opt;
                            }

                            // Special Case for OwnerId
                            if(opt.value === "case_queue") {
                                queueOpt = opt;
                            }
                        });

                        if(valueOpt === null && queueOpt) {
                            valueOpt = queueOpt;
                        }
                        namePointingReferenceSelect.value = valueOpt.value;
                        els.srcAllHiddenReferenceInputs.objIdentifier.value = valueOpt.value;
                    }
                    else {
                        els.srcAllVisibleInput.value = value.label;
                        if(sObjectKeyPrefix) {
                            els.srcAllHiddenReferenceInputs.objIdentifier.value = sObjectKeyPrefix;
                        }
                    }
                }
                else {  // Assumes value is a primitive
                    els.srcAllVisibleInput.value = value;
                }
            }

        }

        function clearSrcAllErrorMessages(els) {
            if(els.srcAllVisibleInput) {
                var srcAllMessagesSpan = els.srcAllMessages.querySelector("span");

                // Clear any existing messages
                //srcAllMessagesSpan.removeAllChildren();
                srcAllMessagesSpan.innerHTML = '';

                els.srcAllVisibleInput.closest(".slds-form-element").classList.remove("slds-has-error");
            }
        }

        function updateRefTabLink(link, id) {
            link.setAttribute("data-reference-id", id);
            if(!SF_UX.IN_CONSOLE) {
                link.href = '/' + id;
            }
        }

        // Adds padding to the bottom of the buttons in lightning and both consoles.
        function adjustBottomButtonPadding() {
            if(!(sforce && sforce.console && sforce.console.isInConsole()) && {!JSENCODE($User.UIThemeDisplayed) == 'Theme3'}) {
                document.getElementById('bottom_buttons').classList.remove('slds-p-bottom_small');
            }
        }

        function setTextAreaModalHeights() {
            var newHeight = (window.innerHeight * .65);
            PageUtil.forEach(document.querySelectorAll(".textarea-input-table, .cke_contents, .textarea-input-options"), function(el) {
                var h = newHeight;
                if(el.classList.contains("textarea-input-options")) {
                    var wrappers = document.querySelectorAll(".textarea-wrapper");
                    var activeWrapper = null;
                    PageUtil.forEach(wrappers, function(w) {
                        if(!w.classList.contains("slds-hide")) {
                            activeWrapper = w;
                            return true;
                        }
                    });
                    if(activeWrapper && activeWrapper.querySelector("iframe")) {
                        h += 42;
                    }
                    el.style.height = h + "px";
                }
                else {
                    el.style.height = newHeight + "px";
                }
            });
        }

        function scrollToPreviousCase() {
            pageConfig.VIEW_OFFSET -= (pageConfig.VIEW_OFFSET === 0) ? 0 : 1;
            //console.log('VIEW_OFFSET = ' + pageConfig.VIEW_OFFSET);
            pageConfig.ACTUAL_OFFSET -= (pageConfig.ACTUAL_OFFSET === 0) ? 0 : 1;
            adjustCasePositioning(true);
        }

        function scrollToNextCase() {
            pageConfig.VIEW_OFFSET += (pageConfig.VIEW_OFFSET === getCardsEndIndex()) ? 0 : 1;
            //console.log('VIEW_OFFSET = ' + pageConfig.VIEW_OFFSET);
            pageConfig.ACTUAL_OFFSET += (pageConfig.ACTUAL_OFFSET === pageConfig.CASE_COUNT) ? 0 : 1;
            adjustCasePositioning();
        }

        function removeCase(caseId) {
            var caseCard = getCaseCardForCaseId(caseId);
            caseCard.querySelector(".case-card-hidden-details [id$='h__isRemoved']").value = true;
            caseCard.setAttribute("data-removed", true);
            pageConfig.CASE_COUNT -= 1;
            scrollToPreviousCase();
            resetSrcCaseValues();
            var masterCaseId = document.querySelector("[id$='h__masterCaseId']").value;
            resetSrcCasesSelectsForCard(getCaseCardForCaseId(masterCaseId));
            updateRemoveButtonsUI();
            REMOVED_CASES++;
        }

        function remaster(caseId) {
            var oldMasterId = document.getElementById('{!$Component.frm.h__masterCaseId}').value;
            document.getElementById('{!$Component.frm.h__masterCaseId}').value = caseId;
            setCaseUIAsChild(oldMasterId);
            setCaseUIAsMaster(caseId);
            resetSrcCaseValues();
            DIRTY = false;
            resetSrcCasesSelectsForCard(getCaseCardForCaseId(oldMasterId));
            resetSrcCasesSelectsForCard(getCaseCardForCaseId(caseId));
        }

        function setDirty() {
            DIRTY = true;
        }

        function setFieldCutoffForCard(card, fieldName) {
            /*
                Sets the max height of the div containing the value for a field. 
                The max height is determined by a number of rows.
                If the "Show More" link has been clicked, there is no max height.
            */
            var defaultMaxHeight = pageConfig.CARD_LINE_HEIGHT * getMaxRowCount();
            var valueWrapper = card.querySelector(".detail-col.value-col[data-is-value-wrapper='true'][data-field-name='" + fieldName + "']");
            var valueWrapperContent = getFieldValueElements(valueWrapper).valueWrapperContent;
            valueWrapperContent.style.maxHeight = null;
            valueWrapperContent.style.height = null;
            var valueWrapperContentHeight = valueWrapperContent.getBoundingClientRect().height;
            var overflowing = valueWrapperContentHeight > defaultMaxHeight;
            var showAll = valueWrapper.getAttribute("data-show-all") === "true";
            PageUtil.addClassOnCondition(valueWrapperContent, "overflow", overflowing);
            valueWrapper.setAttribute("data-has-overflow", overflowing);
            valueWrapperContent.style.maxHeight = (showAll) ? null : (defaultMaxHeight + "px");
        }


        function equalizeHeightsForField(fieldName) {
            /*
                Sets the height of all a field on all cards to the same height
                The height chosen is the tallest one.
            */

            // First iteration: Determine the maximum height
            var maxHeight = -1;
            PageUtil.forEach(document.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true'][data-field-name='" + fieldName + "']"), function(valueWrapper) {
                var valueWrapperContent = getFieldValueElements(valueWrapper).valueWrapperContent;
                valueWrapperContent.style.height = null;
                maxHeight = Math.max(maxHeight, valueWrapperContent.getBoundingClientRect().height);
            });

            // Second iteration: Apply the maximum height
            PageUtil.forEach(document.querySelectorAll(".detail-col.value-col[data-is-value-wrapper='true'][data-field-name='" + fieldName + "']"), function(valueWrapper) {
                var els = getFieldValueElements(valueWrapper);
                els.valueWrapperContent.style.height = maxHeight + "px";
            });
        }

        function updateToggleLinkText(card, fieldName) {
            /*
                Sets the text of the "Show More/Show Less" link.
            */
            var valueWrapper = card.querySelector(".detail-col.value-col[data-is-value-wrapper='true'][data-field-name='" + fieldName + "']");
            var els = getFieldValueElements(valueWrapper);
            var valueWrapperContent = els.valueWrapperContent;

            var linkText = "Show More";
            if(valueWrapper.getAttribute("data-show-all") === "true" && !(valueWrapperContent.style.maxHeight)) {
                linkText = "Show Less";
            }
            els.toggleLink.innerText = linkText;
        }

        function getMaxRowCount() {
            if(PageUtil.isScreenMobileSmallerSize() || PageUtil.isScreenMobileSmallestSize()) {
                return pageConfig.NUM_LINES_DISPLAYED.MOBILE_SMALLER;
            }
            else if(PageUtil.isScreenMobileSize()) {
                return pageConfig.NUM_LINES_DISPLAYED.MOBILE;
            }
            else {
                return pageConfig.NUM_LINES_DISPLAYED.DESKTOP;
            }
        }
        
        // DOM Adjustments
        function adjustCasePositioning() {
            adjustCasePositioning(false);
        }

        function adjustCasePositioning(goPrev) {
            var caseCardsContainer = document.getElementById('case-cards-container');

            // One final check
            var moreCaseCardSlotsThanCases = getCasesDisplayed() > pageConfig.CASE_COUNT;

            var percentage = -1 * Math.min(getCardLength() * pageConfig.VIEW_OFFSET, getCardLength() * pageConfig.ACTUAL_OFFSET, (100 / getCasesDisplayed()) * getCardsEndIndex());
            var prevBtn = document.getElementById('previous-case-btn');
            var nextBtn = document.getElementById('next-case-btn');
            prevBtn.classList.remove('hidden-btn');
            nextBtn.classList.remove('hidden-btn');
            if(pageConfig.VIEW_OFFSET === getCardsEndIndex() || moreCaseCardSlotsThanCases) {
                nextBtn.classList.add('hidden-btn');
            }

            if(pageConfig.VIEW_OFFSET === 0 || moreCaseCardSlotsThanCases) {
                prevBtn.classList.add('hidden-btn');
            }

            caseCardsContainer.style.transform = 'translateX(' + percentage + '%)';
            pageConfig.TRANSLATE_PERCENT = percentage;
        }

        function getCasesDisplayed() {
            if(PageUtil.isScreenMobileSmallerSize()) {
                return pageConfig.MAX_CASES_DISPLAYED.MOBILE_SMALLER;
            }
            else if(PageUtil.isScreenMobileSize()) {
                return pageConfig.MAX_CASES_DISPLAYED.MOBILE;
            }
            return pageConfig.MAX_CASES_DISPLAYED.DESKTOP;
        }

        // Get the index of the case cards where N will still display on screen and the last case card is the last case.
        function getCardsEndIndex() {
            return Math.max(0, pageConfig.CASE_COUNT - getCasesDisplayed());
        }

        function getCardLength() {
            return (100/ getCasesDisplayed());
        }

        // Action Overlay
        function showActionOverlay(faded) {
            var actionOverlay = getActionOverlay();
            actionOverlay.querySelector(".slds-backdrop").style.backgroundColor = (faded) ? 'rgba(255, 255, 255, 0.75)' : '#FFFFFF';
            actionOverlay.classList.remove('slds-hide');
            ACTION_OVERLAYS.setEnableTabsForPage(false);
        }

        function hideActionOverlay() {
            var actionOverlay = getActionOverlay();
            actionOverlay.classList.add('slds-hide');
            ACTION_OVERLAYS.setEnableTabsForPage(true);
        }

        function getActionOverlay() {
            return document.getElementById('action-overlay');
        }

        // Modal
        function hideModal() {
            displayModal(false);
        }

        function showModalVariant(variant, options) {
            displayModal(true);

            if(variant === MODAL_VARIANTS.TEXTAREA) {
                var modal = document.getElementById("modal");
                modal.classList.add("slds-modal_large");
                modal.querySelector("header").classList.add("slds-hidden");
                modal.querySelector("header button").classList.add("slds-visible");
                modal.querySelector(".slds-modal__content").classList.add("textarea-modal-content");
                modal.querySelector("footer").classList.add("slds-hide");
                
                PageUtil.forEach(document.querySelectorAll(".textarea-input-table .textarea-wrapper"), function(el) {
                    if(el.getAttribute("data-field-name") === options.fieldName && el.getAttribute("data-case-id") === options.caseId) {
                        el.classList.remove("slds-hide");
                        setTimeout(function() {
                            el.querySelector("textarea").focus();
                        }, 1);
                        
                    }
                    else {
                        el.classList.add("slds-hide");
                    }
                });

                PageUtil.forEach(document.querySelectorAll(".field-options-wrapper"), function(el) {
                    (el.getAttribute("data-field-name") === options.fieldName) ? el.classList.remove("slds-hide") : el.classList.add("slds-hide");
                });

                PageUtil.forEach(document.querySelectorAll(".field-label-filler"), function(el) {
                    //el.removeAllChildren();
                    el.innerHTML = '';
                    el.appendChild(document.createTextNode(options.fieldLabel));
                })

                setTextAreaModalHeights();
            }

            PageUtil.forEach(document.querySelectorAll(".modal-heading-text, .modal-content, .modal-footer-btn"), function(el) {
                var variants = el.getAttribute("data-variants");
                if(variants === MODAL_VARIANTS.ALL) {
                    el.classList.remove("slds-hide");
                }
                else {
                    variants = variants.split(',');
                    PageUtil.forEach(variants, function(v) {
                        if(v.trim() === variant) {
                            el.classList.remove("slds-hide");
                        }
                    });
                }
            });

            if(options) {
                if(options.caseId) {
                    document.getElementById("h__modalCaseId").value = options.caseId;
                }

                if(options.fieldName) {
                    document.getElementById("h__modalCaseField").value = options.fieldName;
                }
            }
        }

        function displayModal(doShow) {
            var modal = document.getElementById("modal");
            var modalBackdrop = document.getElementById('modal-backdrop');
            
            modal.setAttribute("tab-index", (doShow) ? 0 : -1);
            modal.setAttribute("aria-hidden", !doShow);

            if(doShow) {
                modal.classList.add("slds-fade-in-open");
                modalBackdrop.classList.add("slds-backdrop_open");
                ACTION_OVERLAYS.setEnableTabsForPageExceptDiv(false, 'modal');
                document.addEventListener('keydown', handleModalOnKeyDown);
                document.removeEventListener('keydown', handlePageOnKeyDown); 
            }
            else {
                modal.classList.remove("slds-fade-in-open");
                modalBackdrop.classList.remove("slds-backdrop_open");  
                ACTION_OVERLAYS.setEnableTabsForPageExceptDiv(true,'modal');
                document.addEventListener('keydown', handlePageOnKeyDown);
                document.removeEventListener('keydown', handleModalOnKeyDown); 
                clearModal();             
            }
        }

        function clearModal() {
            var modal = document.getElementById("modal");
            modal.classList.remove("slds-modal_large");
            modal.querySelector("header").classList.remove("slds-hidden");
            modal.querySelector("header button").classList.remove("slds-visible");
            modal.querySelector(".slds-modal__content").classList.remove("textarea-modal-content");
            modal.querySelector("footer").classList.remove("slds-hide");

            PageUtil.forEach(document.querySelectorAll(".modal-heading-text, .modal-content, .modal-footer-btn, #modal-spinner"), function(el) {
                el.classList.add("slds-hide");
            });
            document.getElementById("modal-close-btn").disabled = false;
            hideModalSpinner();
        }

        function showModalSpinner() {
            document.getElementById("modal-spinner").classList.remove("slds-hide");
        }

        function hideModalSpinner() {
            document.getElementById("modal-spinner").classList.add("slds-hide");
        }

        // Merge Process
        function performMerge() {
            showModalSpinner();
            mergeCases();
        }


        // Calendar Styling
        function styleCalendar() {
            // Calendars are outside of the form
            var datePicker = document.getElementById('datePicker');
            if(datePicker) {
                if(datePicker.parentNode.className != SLDS_SCOPE_CLASS) {
                    datePicker.parentNode.removeChild(datePicker);
                    var scopeWrapper = document.createElement('span');
                    scopeWrapper.className = SLDS_SCOPE_CLASS;
                    scopeWrapper.appendChild(datePicker);
                    document.body.appendChild(scopeWrapper);
                }

                PageUtil.forEach(document.getElementsByClassName('calLeft'),function(leftButton) {
                    replaceCalendarButton('left',leftButton);
                });

                PageUtil.forEach(document.getElementsByClassName('calRight'), function(rightButton) {
                        replaceCalendarButton('right',rightButton);
                });

                PageUtil.forEach(document.querySelectorAll('#calMonthPicker,#calYearPicker'), function(calSelect) {
                    updateCalendarSelect(calSelect);
                });

                PageUtil.forEach(document.querySelectorAll('.dateBar'), function(dateBar) {
                    dateBar.classList.add('slds-date-bar');
                });
            }
        }

        function replaceCalendarButton(dir, calBtn) {
            var span = document.createElement('span');
            span.classList.add('calButton');
            span.onclick = calBtn.onclick;
            span.title = calBtn.title;


            if(dir === 'left') {
                span.classList.add('calButtonLeft');
            }

            if(dir === 'right') {
                span.classList.add('calButtonRight');
            }

            calBtn.parentNode.replaceChild(span,calBtn);
        }

        function updateCalendarSelect(calSelect) {
            var selectParent = calSelect.parentElement;

            var selectContainer = document.createElement('div');
            selectContainer.className = 'slds-select_container';

            selectParent.replaceChild(selectContainer,calSelect);
            selectContainer.appendChild(calSelect);
            calSelect.className = 'slds-select';
        }

        // Auto Copy
        function autoCopyHighlightedText() {
            var selection = window.getSelection();
            if(selection) {
                if(selection.rangeCount === 1) {
                    if(selection.getRangeAt(0).startOffset !== selection.getRangeAt(0).endOffset) {
                        var anchorNode = selection.anchorNode;
                        var focusNode = selection.focusNode;
                        if(anchorNode && focusNode) {
                            var anchorAutoCopyParent = anchorNode.parentElement.closest("[data-auto-copy='true']");
                            if(anchorAutoCopyParent && (focusNode.parentElement.closest("[data-auto-copy='true']") === anchorAutoCopyParent)) {
                                document.execCommand("copy");
                                selection.removeAllRanges();
                                showCopiedText(anchorNode.parentElement.closest("[data-auto-copy='true']").querySelector(".text-area-copied"));
                            }
                        }
                    }
                }
            }
        }

        function showCopiedText(copiedText) {
            copiedText.style.transition = "none";
            copiedText.classList.remove("faded");
            setTimeout(function() {
                hideCopiedText(copiedText);
            }, 1500);
        }

        function hideCopiedText(copiedText) {
            copiedText.style.transition = null;
            copiedText.classList.add("faded");
        }

        // Console
        var CONSOLE_TAB_TYPE = Object.freeze({
            NAVIGATION: "navigation",
            PRIMARY: "primary",
            SUB: "sub"
        });

        function consoleNavigateOnMergeSuccess(masterCaseUrl) {
            if(SF_UX.IN_CONSOLE) {
                sforce.console.getEnclosingTabId(function(enclosingTabResult) {

                    if(enclosingTabResult.success) {    // Primary/Workspace tab or Subtab
                        if(SF_UX.IN_CLASSIC_CONSOLE) {
                            finishConsoleMergeWithGeneratedUrl(masterCaseUrl, enclosingTabResult.id);
                        }
                        else if(SF_UX.IN_LIGHTNING_CONSOLE) {
                            masterCaseUrl = '/lightning/r' + masterCaseUrl + '/view';

                            sforce.console.getEnclosingPrimaryTabId(function(primaryTabResult) {

                                if(enclosingTabResult.id === primaryTabResult.id) { // Is Primary/Workspace tab
                                    finishConsoleMergeWithGeneratedUrl(masterCaseUrl, enclosingTabResult.id);
                                }
                                else {  // Generate Console Url will not focus the tab of the master case if the case started from is not the master case, but will 
                                        //instead focus the primary tab that initiated the merge.
                                    sforce.console.openSubtab(primaryTabResult.id, masterCaseUrl, true, undefined, null, function(openSubtabResult) {
                                        sforce.console.refreshSubtabById(openSubtabResult.id, false);
                                        sforce.console.closeTab(enclosingTabResult.id);
                                    });
                                }

                            });

                        }

                    }
                    else {    // Navigation Tab
                        returnToListView();
                    }

                });
            }
        }

        function finishConsoleMergeWithGeneratedUrl(masterCaseUrl, enclosingTabId) {
            sforce.console.generateConsoleUrl([masterCaseUrl], function(generateUrlResult) {
                // Open the primary case
                sforce.console.openConsoleUrl(null, generateUrlResult.consoleUrl, true, undefined, undefined, function(openUrlResult) {
                    
                    // Close the Merge Tab
                    sforce.console.closeTab(enclosingTabId);

                });
            });
        }

        function consoleNavigateRecord(recordUrl) {
            if(SF_UX.IN_CONSOLE) {
                if(SF_UX.IN_LIGHTNING_CONSOLE) {    // Modify URL for lightning (Specifically User records so they don't have to navigate two pages to display the record)
                    recordUrl = '/lightning/r' + recordUrl + '/view';
                }
                sforce.console.generateConsoleUrl([recordUrl], function(generateUrlResult) {
                    if(generateUrlResult.success) {
                        sforce.console.openConsoleUrl(null, generateUrlResult.consoleUrl, true);
                    }
                    else {
                        console.error("Failed to generate url");
                    }
                });
            }
        }

        function navigateCancel() {
            if(SF_UX.IN_CLASSIC_CONSOLE || SF_UX.IN_CLASSIC) {
                window.history.back();
            }
            else if(SF_UX.IN_LIGHTNING_CONSOLE) {
                let retURL = '{!JSENCODE($CurrentPage.parameters.vfRetURLInSFX)}';
                getEnclosingTabDetails((r1) => {
                    if(r1.success) {
                        // If a primary tab...
                        if(r1.type === CONSOLE_TAB_TYPE.PRIMARY) {
                            if(retURL) {
                                // If came from a list view, open the list view in a new tab, focus it, and then close this tab.
                                sforce.console.openConsoleUrl(null, retURL, true, '', '', (r3) => {
                                    sforce.console.closeTab(r1.id);
                                });
                            }
                            else {
                                sforce.console.closeTab(r1.id); // If not from a list view, close this tab.
                            }
                        }
                        else if(r1.type === CONSOLE_TAB_TYPE.SUB) {
                            sforce.console.closeTab(r1.id); // If a Subtab, close the tab.
                        }
                        else {
                            sforce.one.back(true);  // Navigation tab, go back.
                        }
                    }
                    else {
                        console.error('CsMrgSelect: Error occurred during navigation.');
                        sforce.one.back(true);  // As a fallback, navigate back.
                    }
                });
            }
            else if(SF_UX.IN_LIGHTNING_EXPERIENCE) {
                // Note: Lightning Experience will skip over the Find page.
                sforce.one.back(true);
            }
        }

        function getEnclosingTabDetails(callback) {
            sforce.console.getEnclosingPrimaryTabId((r1) => {
                if(r1.success) {
                    sforce.console.getEnclosingTabId((r2) => {
                        if(r2.success) {
                            result = {success: true, id:r2.id, type: (r1.id === r2.id) ? CONSOLE_TAB_TYPE.PRIMARY : CONSOLE_TAB_TYPE.SUB};
                            callback(result);
                        }
                        else {
                            result = {success: false};
                            callback(result);
                        }
                    });
                }
                else {
                    let result = {success: true, type: CONSOLE_TAB_TYPE.NAVIGATION};
                    callback(result);
                }
            });
        }
    </script>

    <!-- ENUMS, GLOBALS, and Initialization -->
    <script type="text/javascript">
        // Enums
        var MODAL_VARIANTS = {
            ALL : 'all',    // Available in all variants
            MERGE : 'merge',    // Available when about to merge a case
            REMOVE : 'remove',  // Available when about to remove a case
            REMASTER : 'remaster',   // Available when about to select a new master case
            TEXTAREA : 'textarea'   // Available when editing a text area
        };

        // Globals
        var pageConfig = {
            VIEW_OFFSET: 0,  // How many cards before end, 0 -> maxCasesDisplayed
            ACTUAL_OFFSET: 0,   // How many cards in you are, 0 -> Case Count
            CASE_COUNT: {!mergeCases.size},
            MAX_CASES_DISPLAYED: {
                DESKTOP: {!JSENCODE(maxCasesDisplayedDesktop)}, 
                MOBILE: {!JSENCODE(maxCasesDisplayedMobile)},
                MOBILE_SMALLER: {!JSENCODE(maxCasesDisplayedMobileSmaller)}
            },
            FIELDS_MAP: null,   // to be set on load
            MERGE_MODAL_IS_SHOWING: false,
            TRANSLATE_PERCENT: 0,
            //TEXT_LENGTH_LIMIT: 255
            CARD_LINE_HEIGHT: 19.5,
            NUM_LINES_DISPLAYED: {
                DESKTOP: 6,
                MOBILE: 6,
                MOBILE_SMALLER: 6,
            }
        };

        var SF_UX = new SalesforceUX();
        var REMOVED_CASES = 0;
        var DIRTY = false;
        var SRC_CASE_VALUES;
        var SLDS_SCOPE_CLASS = 'slds-scope';
        var REQUERIED_OBJECT;
        var SHARING_CHECKED_FOR_CASE = {};
        SHARING_CHECKED_FOR_CASE[APEX.masterCaseId] = true;
        // End Globals

        // Removes the annoying inline parameter when called from CsMrgDupeDetector
        if(location.href.match(/inline=1/)) {
            window.top.location = location.href.replace(/inline=1/, '');
        }

        if(SF_UX.IN_CONSOLE) {
            sforce.console.setTabTitle('Merge Cases - Case Merge Premium'); 
        }

        // Page Event Listeners & Handlers
        window.addEventListener('load', handlePageOnLoad);
        if(APEX.numCases > 0) {
            window.addEventListener('resize', handlePageOnResize);
            document.addEventListener("mouseup", handlePageOnMouseUp);
            document.addEventListener('keydown', handlePageOnKeyDown);
        }
    </script>
</apex:page>